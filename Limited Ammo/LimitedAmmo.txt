settings
{
	main
	{
		Description: "It's Overwatch, but everyone has finite ammo.\n\nCode: Q72WR\nLast updated: 2025-01-30"
		Mode Name: "Limited Ammo"
	}
	lobby
	{
		Max Team 1 Players: 5
		Max Team 2 Players: 5
	}
	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Workshop Island
			}
		}
		General
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}
	heroes
	{
		General
		{
			disabled heroes
			{
				Kiriko
				Lifeweaver
				Mauga
				Venture
				Juno
				Ramattra
				Doomfist
			}
		}
	}
	extensions
	{
		Projectiles
		Explosion Sounds
	}
}
variables {
    global:
        0: DEBUG
        1: d
        2: LOG_STATS
        3: s
        4: str
        5: stats_Highlights
        6: stats_MatchDuration
        7: stats_ReplayDuration
        8: stats_DurationPlaytime
        9: stats_DurationAlive
        10: stats_DurationOutOfAmmo
        11: stats_AmmoConsumed
        12: stats_TimesReloaded
        13: stats_AmmoPacksCollected
        14: stats_Kills
        15: stats_KillsOutOfAmmo
        16: stats_Deaths
        17: stats_DeathsOutOfAmmo
        18: g_PlayerIsInSlot
        19: g_PlayerEntities
        20: g_PlayerHeroIndices
        21: g_TimestampsPlaytime
        22: g_TimestampsAlive
        23: g_TimestampsOutOfAmmo
        24: AMMO_PACK_RESPAWN_TIME
        25: SHOW_ENEMY_INDICATORS
        26: C_HERO_AMMO_DATA
        27: C_HEROES_DISABLED
        28: C_HEROES_ALT_FIRE
        29: C_HEROES_QUICK_DISABLE_RELOAD
        30: C_HEROES_NO_WARNING_ULT
        31: i
        32: j
        33: bracket
        34: C_IS_CONTROL
        35: CONTROL_STAGE
        36: C_AMMO_PACKS
        37: C_AMMO_PACKS_STAGE_SLICE
        38: AMMO_PACK_POSITIONS
        39: AMMO_PACK_TIMESTAMPS
        40: AMMO_PACK_EFFECTS_PROJ
        41: AMMO_PACK_EFFECTS_RING
        42: AMMO_PACK_EFFECTS_TEXT
    player:
        0: SLOT_INDEX
        1: HAS_ALT_FIRE
        2: AMMO_TYPE_PRIMARY
        3: AMMO_TYPE_SECONDARY
        4: MAX_RESERVE_AMMO_PRIMARY
        5: MAX_RESERVE_AMMO_SECONDARY
        6: reserveAmmoPrimary
        7: reserveAmmoSecondary
        8: cachedAmmoPrimary
        9: cachedAmmoSecondary
        10: ammoStatePrimary
        11: ammoStateSecondary
        12: touchedPackIndex
        13: heroIndex
        14: canCollectPacks
        15: showIndicator
        16: suppressNoAmmoWarning
        17: pauseAmmoManager
        18: wasInMech
        19: wasDuplicating
        20: echoReserveAmmoPrimary
        21: echoAmmoPrimary
}
subroutines {
    0: resetPlayerState
    1: commitDurationPlaytime
    2: commitDurationAlive
    3: commitDurationOutOfAmmo
    4: updateHeroIndex
    5: cacheAmmoData
    6: refillReserveAmmo
    7: givePlayerAmmo
    8: destroyAmmoPacks
    9: createAmmoPacks
}
rule ("Initialize global variables") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(DEBUG, Workshop Setting Toggle(Custom String("Technical Settings", Null, Null, Null), Custom String("Show Debug Information", Null, Null, Null), False, 1));
        Set Global Variable(d, 0);
        Set Global Variable(LOG_STATS, Workshop Setting Toggle(Custom String("Technical Settings", Null, Null, Null), Custom String("Record Statistics", Null, Null, Null), False, 0));
        Set Global Variable(s, 0);
        Set Global Variable(str, Custom String("", Null, Null, Null));
        Set Global Variable(stats_Highlights, Empty Array);
        Set Global Variable(stats_MatchDuration, 0);
        Set Global Variable(stats_ReplayDuration, 0);
        Set Global Variable(stats_DurationPlaytime, Empty Array);
        Set Global Variable(stats_DurationAlive, Empty Array);
        Set Global Variable(stats_DurationOutOfAmmo, Empty Array);
        Set Global Variable(stats_AmmoConsumed, Empty Array);
        Set Global Variable(stats_TimesReloaded, Empty Array);
        Set Global Variable(stats_AmmoPacksCollected, Empty Array);
        Set Global Variable(stats_Kills, Empty Array);
        Set Global Variable(stats_KillsOutOfAmmo, Empty Array);
        Set Global Variable(stats_Deaths, Empty Array);
        Set Global Variable(stats_DeathsOutOfAmmo, Empty Array);
        Set Global Variable(g_PlayerIsInSlot, Empty Array);
        Set Global Variable(g_PlayerEntities, Empty Array);
        Set Global Variable(g_PlayerHeroIndices, Empty Array);
        Set Global Variable(g_TimestampsPlaytime, Empty Array);
        Set Global Variable(g_TimestampsAlive, Empty Array);
        Set Global Variable(g_TimestampsOutOfAmmo, Empty Array);
        Set Global Variable(AMMO_PACK_RESPAWN_TIME, Workshop Setting Integer(Custom String("Gameplay Settings", Null, Null, Null), Custom String("Ammo Pack Respawn Time (seconds)", Null, Null, Null), 10, 1, 60, 0));
        Set Global Variable(SHOW_ENEMY_INDICATORS, Workshop Setting Toggle(Custom String("Gameplay Settings", Null, Null, Null), Custom String("Show Out of Ammo Indicators Above Enemies", Null, Null, Null), True, 1));
        Set Global Variable(C_HERO_AMMO_DATA, Array(Array(1, 3, 0, Null), Array(1, 6, 0, Null), Array(1, 2, 0, Null), Array(2, 30, 0, Null), Array(1, 2, 0, Null), Array(0, Null, 0, Null), Array(1, 4, 0, Null), Array(1, 3, 0, Null), Array(1, 2, 0, Null), Array(1, 3, 0, Null), Array(1, 2, 0, Null), Array(1, 2, 0, Null), Array(1, 3, 0, Null), Array(1, 4, 0, Null), Array(1, 5, 0, Null), Array(1, 4, 0, Null), Array(1, 5, 0, Null), Array(1, 4, 0, Null), Array(1, 3, 0, Null), Array(2, 160, 0, Null), Array(1, 2, 0, Null), Array(1, 3, 0, Null), Array(1, 5, 0, Null), Array(1, 2, 0, Null), Array(2, 250, 0, Null), Array(0, Null, 0, Null), Array(0, Null, 2, 50), Array(1, 3, 0, Null), Array(1, 6, 0, Null), Array(1, 3, 0, Null), Array(1, 4, 0, Null), Array(1, 2, 1, 2), Array(1, 2, 1, 2), Array(1, 3, 0, Null), Array(2, 48, 0, Null), Array(1, 3, 0, Null), Array(1, 2, 1, 2), Array(1, 2, 0, Null), Array(1, 2, 0, Null), Array(1, 3, 0, Null), Array(1, 2, 0, Null), Array(1, 2, 0, Null)));
        Set Global Variable(C_HEROES_DISABLED, Array(Hero(Doomfist), Hero(Juno), Hero(Kiriko), Hero(Lifeweaver), Hero(Mauga), Hero(Ramattra), Hero(Venture)));
        Set Global Variable(C_HEROES_ALT_FIRE, Array(Hero(Cassidy), Hero(Genji), Hero(Mauga), Hero(Mei), Hero(Symmetra), Hero(Torbjörn), Hero(Winston), Hero(Zarya), Hero(Zenyatta)));
        Set Global Variable(C_HEROES_QUICK_DISABLE_RELOAD, Array(Hero(Ashe), Hero(Doomfist)));
        Set Global Variable(C_HEROES_NO_WARNING_ULT, Array(Hero(Bastion), Hero(Cassidy), Hero(Doomfist), Hero(Genji), Hero(Junkrat), Hero(Orisa), Hero(Roadhog), Hero(Sigma), Hero(Torbjörn), Hero(Venture), Hero(Winston)));
        Set Global Variable(i, 0);
        Set Global Variable(j, 0);
        Set Global Variable(C_IS_CONTROL, False);
        Set Global Variable(CONTROL_STAGE, -1);
        Set Global Variable(C_AMMO_PACKS, Empty Array);
        Set Global Variable(C_AMMO_PACKS_STAGE_SLICE, Empty Array);
        Set Global Variable(AMMO_PACK_POSITIONS, Empty Array);
        Set Global Variable(AMMO_PACK_TIMESTAMPS, Empty Array);
        Set Global Variable(AMMO_PACK_EFFECTS_PROJ, Empty Array);
        Set Global Variable(AMMO_PACK_EFFECTS_RING, Empty Array);
        Set Global Variable(AMMO_PACK_EFFECTS_TEXT, Empty Array);
    }
}

rule ("Initialize player variables") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, SLOT_INDEX, -1);
        Set Player Variable(Event Player, HAS_ALT_FIRE, False);
        Set Player Variable(Event Player, AMMO_TYPE_PRIMARY, 0);
        Set Player Variable(Event Player, AMMO_TYPE_SECONDARY, 0);
        Set Player Variable(Event Player, MAX_RESERVE_AMMO_PRIMARY, 0);
        Set Player Variable(Event Player, MAX_RESERVE_AMMO_SECONDARY, 0);
        Set Player Variable(Event Player, reserveAmmoPrimary, 0);
        Set Player Variable(Event Player, reserveAmmoSecondary, 0);
        Set Player Variable(Event Player, cachedAmmoPrimary, -1);
        Set Player Variable(Event Player, cachedAmmoSecondary, -1);
        Set Player Variable(Event Player, ammoStatePrimary, 0);
        Set Player Variable(Event Player, ammoStateSecondary, 0);
        Set Player Variable(Event Player, touchedPackIndex, -1);
        Set Player Variable(Event Player, heroIndex, -1);
        Set Player Variable(Event Player, canCollectPacks, True);
        Set Player Variable(Event Player, showIndicator, True);
        Set Player Variable(Event Player, suppressNoAmmoWarning, False);
        Set Player Variable(Event Player, pauseAmmoManager, False);
        Set Player Variable(Event Player, wasInMech, False);
        Set Player Variable(Event Player, wasDuplicating, False);
        Set Player Variable(Event Player, echoReserveAmmoPrimary, 0);
        Set Player Variable(Event Player, echoAmmoPrimary, 0);
    }
}

rule ("Begone, Inspector") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == False;
    }
    actions {
        Disable Inspector Recording;
    }
}

rule ("Text Formatting") {
    event {
        Ongoing - Global;
    }
    actions {
        "stores a '<' character so we can display colored text (credit to Zezombye)."
        Create Dummy Bot(Hero(Ana), If-Then-Else(Compare(Current Game Mode, ==, Game Mode(Deathmatch)), All Teams, Team 1), False, Null, Null);
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________〼", Null, Null, Null));
        Set Global Variable(bracket, String Split(First Of(Last Created Entity), Empty Array));
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________ࡀ", Null, Null, Null));
        Set Global Variable(bracket, String Slice(String Replace(Custom String("______________________________________________________________________________________________________________________________〼", Null, Null, Null), Global.bracket, First Of(Last Created Entity)), 126, True));
        Destroy All Dummy Bots;
    }
}

rule ("Enforce Hero Whitelist") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        "for some reason, heroes disabled via custom game settings are sometimes still enabled.\nthis ensures that disabled heroes cannot be selected."
        Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Global.C_HEROES_DISABLED));
    }
}

disabled rule ("Kick Players After Match") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Match Complete == True;
    }
    actions {
        "cycle in new players for streamed playtests."
        Wait(25, Ignore Condition);
        Remove Player(Remove From Array(Global.g_PlayerEntities, Host Player));
    }
}

rule ("Subroutine: Reset Player State") {
    event {
        Subroutine;
        resetPlayerState;
    }
    actions {
        Set Player Variable(Event Player, pauseAmmoManager, False);
        Set Player Variable(Event Player, wasInMech, False);
        Set Player Variable(Event Player, showIndicator, True);
        Set Player Variable(Event Player, suppressNoAmmoWarning, False);
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Secondary Fire));
        Allow Button(Event Player, Button(Reload));
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Set Reload Enabled(Event Player, True);
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
    }
}

rule ("Subroutine: Commit Duration: Playtime") {
    event {
        Subroutine;
        commitDurationPlaytime;
    }
    actions {
        If(Compare(Value In Array(Global.g_TimestampsPlaytime, (Event Player).SLOT_INDEX), >, 0));
            If(Compare((Event Player).heroIndex, !=, -1));
                Modify Global Variable At Index(stats_DurationPlaytime, (Event Player).heroIndex, Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsPlaytime, (Event Player).SLOT_INDEX)));
            End;
            Set Global Variable At Index(g_TimestampsPlaytime, (Event Player).SLOT_INDEX, 0);
        End;
    }
}

rule ("Subroutine: Commit Duration: Alive") {
    event {
        Subroutine;
        commitDurationAlive;
    }
    actions {
        If(Compare(Value In Array(Global.g_TimestampsAlive, (Event Player).SLOT_INDEX), >, 0));
            If(Compare((Event Player).heroIndex, !=, -1));
                Modify Global Variable At Index(stats_DurationAlive, (Event Player).heroIndex, Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsAlive, (Event Player).SLOT_INDEX)));
            End;
            Set Global Variable At Index(g_TimestampsAlive, (Event Player).SLOT_INDEX, 0);
        End;
    }
}

rule ("Subroutine: Commit Duration: Out of Ammo") {
    event {
        Subroutine;
        commitDurationOutOfAmmo;
    }
    actions {
        If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX), >, 0));
            If(Compare((Event Player).heroIndex, !=, -1));
                Modify Global Variable At Index(stats_DurationOutOfAmmo, (Event Player).heroIndex, Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX)));
            End;
            Set Global Variable At Index(g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX, 0);
        End;
    }
}

rule ("Subroutine: Update Hero Index") {
    event {
        Subroutine;
        updateHeroIndex;
    }
    actions {
        "commit our accumulated playtime before updating our timestamp and hero index."
        If(And(Global.LOG_STATS, Is Game In Progress));
            Call Subroutine(commitDurationPlaytime);
            Set Global Variable At Index(g_TimestampsPlaytime, (Event Player).SLOT_INDEX, Total Time Elapsed);
            Call Subroutine(commitDurationAlive);
            Set Global Variable At Index(g_TimestampsAlive, (Event Player).SLOT_INDEX, Total Time Elapsed);
            Call Subroutine(commitDurationOutOfAmmo);
        End;
        "index is \"-1\" if the player has not yet chosen a hero."
        Set Player Variable(Event Player, heroIndex, Index Of Array Value(All Heroes, If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player))));
        Set Global Variable At Index(g_PlayerHeroIndices, (Event Player).SLOT_INDEX, (Event Player).heroIndex);
    }
}

rule ("Subroutine: Cache Ammo Data") {
    event {
        Subroutine;
        cacheAmmoData;
    }
    actions {
        "a value of \"-1\" prevents the ammo manager from using a previous hero's cached ammo values."
        Set Player Variable(Event Player, cachedAmmoPrimary, -1);
        Set Player Variable(Event Player, cachedAmmoSecondary, -1);
        Set Player Variable(Event Player, AMMO_TYPE_PRIMARY, First Of(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex)));
        Set Player Variable(Event Player, AMMO_TYPE_SECONDARY, Value In Array(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex), 2));
        Set Player Variable(Event Player, MAX_RESERVE_AMMO_PRIMARY, If-Then-Else(Compare((Event Player).AMMO_TYPE_PRIMARY, ==, 2), Value In Array(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex), 1), If-Then-Else(Compare((Event Player).AMMO_TYPE_PRIMARY, ==, 1), Round To Integer(Multiply(Max Ammo(Event Player, 0), Value In Array(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex), 1)), Up), 0)));
        Set Player Variable(Event Player, MAX_RESERVE_AMMO_SECONDARY, If-Then-Else(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 2), Value In Array(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex), 3), If-Then-Else(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 1), Round To Integer(Multiply(Max Ammo(Event Player, 1), Value In Array(Value In Array(Global.C_HERO_AMMO_DATA, (Event Player).heroIndex), 3)), Up), 0)));
        Set Player Variable(Event Player, HAS_ALT_FIRE, Array Contains(Global.C_HEROES_ALT_FIRE, Value In Array(All Heroes, (Event Player).heroIndex)));
    }
}

rule ("Subroutine: Refill Reserve Ammo") {
    event {
        Subroutine;
        refillReserveAmmo;
    }
    actions {
        Set Player Variable(Event Player, reserveAmmoPrimary, (Event Player).MAX_RESERVE_AMMO_PRIMARY);
        Set Player Variable(Event Player, reserveAmmoSecondary, (Event Player).MAX_RESERVE_AMMO_SECONDARY);
    }
}

rule ("Subroutine: Give Player Ammo") {
    event {
        Subroutine;
        givePlayerAmmo;
    }
    actions {
        Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Sound, Color(White), Position Of(Event Player), 150);
        Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
        "give ammo, but don't exceed the maximum reserve."
        If(Compare((Event Player).reserveAmmoSecondary, <, (Event Player).MAX_RESERVE_AMMO_SECONDARY));
            Small Message(Event Player, Custom String("  {0} +{1} AMMO", Ability Icon String(Value In Array(All Heroes, (Event Player).heroIndex), Button(Secondary Fire)), Round To Integer(Min(Subtract((Event Player).MAX_RESERVE_AMMO_SECONDARY, (Event Player).reserveAmmoSecondary), Round To Integer(Multiply((Event Player).MAX_RESERVE_AMMO_SECONDARY, 0.5), Up)), Down), Null));
            Wait(0.016, Ignore Condition);
            Modify Player Variable(Event Player, reserveAmmoSecondary, Add, Min(Subtract((Event Player).MAX_RESERVE_AMMO_SECONDARY, (Event Player).reserveAmmoSecondary), Round To Integer(Multiply((Event Player).MAX_RESERVE_AMMO_SECONDARY, 0.5), Up)));
        End;
        If(Compare((Event Player).reserveAmmoPrimary, <, (Event Player).MAX_RESERVE_AMMO_PRIMARY));
            Small Message(Event Player, Custom String("  {0} +{1} AMMO", Ability Icon String(Value In Array(All Heroes, (Event Player).heroIndex), Button(Primary Fire)), Round To Integer(Min(Subtract((Event Player).MAX_RESERVE_AMMO_PRIMARY, (Event Player).reserveAmmoPrimary), Round To Integer(Multiply((Event Player).MAX_RESERVE_AMMO_PRIMARY, 0.5), Up)), Down), Null));
            Wait(0.016, Ignore Condition);
            Modify Player Variable(Event Player, reserveAmmoPrimary, Add, Min(Subtract((Event Player).MAX_RESERVE_AMMO_PRIMARY, (Event Player).reserveAmmoPrimary), Round To Integer(Multiply((Event Player).MAX_RESERVE_AMMO_PRIMARY, 0.5), Up)));
        End;
    }
}

rule ("HACK: D.Va Switches to Generic Ammo Manager") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(D.Va);
        (Event Player).wasInMech == True;
        Is In Alternate Form(Event Player) == True;
    }
    actions {
        "the player was de-meched while out of ammo."
        If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX), >, 0));
            Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} ({2}", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Event Player, Custom String("{0}) was de-meched while out of ammo for {1} seconds.", Value In Array(All Heroes, (Event Player).heroIndex), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX)), Null)));
        End;
        "pilot d.va has an entirely different weapon."
        Set Player Variable(Event Player, cachedAmmoPrimary, -1);
        Set Player Variable(Event Player, AMMO_TYPE_PRIMARY, 1);
        Set Player Variable(Event Player, MAX_RESERVE_AMMO_PRIMARY, Round To Integer(Multiply(Max Ammo(Event Player, 0), 4), Up));
        Call Subroutine(refillReserveAmmo);
        Allow Button(Event Player, Button(Primary Fire));
        Set Player Variable(Event Player, wasInMech, False);
    }
}

rule ("HACK: D.Va Switches to Custom Ammo Manager") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(D.Va);
        Is In Alternate Form(Event Player) == False;
    }
    actions {
        Call Subroutine(cacheAmmoData);
        "new mech, new me."
        Call Subroutine(refillReserveAmmo);
        Set Player Variable(Event Player, wasInMech, True);
    }
}

rule ("HACK: Echo Duplication Start") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        "this lock-out variable is required, otherwise the rule re-fires when exiting bastion/junkrat ult."
        (Event Player).wasDuplicating == False;
        Is Duplicating(Event Player) == True;
    }
    actions {
        "save echo's ammo prior to duplicating.\nwe store the cached ammo since our current ammo has already changed to the duplicated hero's."
        Set Player Variable(Event Player, echoAmmoPrimary, (Event Player).cachedAmmoPrimary);
        Set Player Variable(Event Player, echoReserveAmmoPrimary, (Event Player).reserveAmmoPrimary);
        "inherit the ammo data of the duplicated hero."
        Call Subroutine(resetPlayerState);
        Call Subroutine(updateHeroIndex);
        Call Subroutine(cacheAmmoData);
        Call Subroutine(refillReserveAmmo);
        Set Player Variable(Event Player, wasDuplicating, True);
    }
}

rule ("HACK: Echo Duplication End") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        (Event Player).wasDuplicating == True;
        Is Duplicating(Event Player) == False;
    }
    actions {
        "the player exited duplication while out of ammo."
        If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX), >, 0));
            Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} ({2}", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Event Player, Custom String("{0}) exited duplication while out of ammo for {1} seconds.", Value In Array(All Heroes, (Event Player).heroIndex), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX)), Null)));
        End;
        "restore echo's ammo data."
        Call Subroutine(resetPlayerState);
        Call Subroutine(updateHeroIndex);
        Call Subroutine(cacheAmmoData);
        "restore echo's ammo from earlier."
        Set Ammo(Event Player, 0, (Event Player).echoAmmoPrimary);
        Set Player Variable(Event Player, reserveAmmoPrimary, (Event Player).echoReserveAmmoPrimary);
        Set Player Variable(Event Player, reserveAmmoSecondary, 0);
        Set Player Variable(Event Player, wasDuplicating, False);
    }
}

rule ("HACK: Symmetra Shooting Shield") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Symmetra);
        Ammo(Event Player, 0) >= Max Ammo(Event Player, 0);
        (Event Player).reserveAmmoPrimary > 0;
        Is Firing Primary(Event Player) == True;
    }
    actions {
        "when symmetra beams a shield, she regenerates ammo. while already at full ammo, this is undetectable by the ammo manager.\nhere we explicitly check for this and subtract reserve ammo manually (10 per second)."
        Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 0.16);
        If(And(Global.LOG_STATS, Is Game In Progress));
            Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 0.16);
        End;
        If(Compare((Event Player).reserveAmmoPrimary, <=, 0));
            Set Player Variable(Event Player, reserveAmmoPrimary, 0);
            "super hack: switch over to the ammo manager rule."
            Set Ammo(Event Player, 0, Subtract(Ammo(Event Player, 0), 0.1));
        End;
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("HACK: Doomfist Ult Over Packs") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Doomfist);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        "doomfist's entity still exists on the ground during ult, but he shouldn't be able to collect ammo packs in this state."
        Set Player Variable(Event Player, canCollectPacks, False);
        Wait Until(Not(Is Using Ultimate(Event Player)), 999999999999999);
        Set Player Variable(Event Player, canCollectPacks, True);
    }
}

rule ("HACK: Doomfist Empty Clip") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Doomfist);
        Ammo(Event Player, 0) <= 0;
    }
    actions {
        "doomfist can shoot before his clip ammo increases, so this prevents firing infinite ammo by holding the button."
        Disallow Button(Event Player, Button(Primary Fire));
        Wait Until(Compare(Ammo(Event Player, 0), >, 0), 999999999999999);
        Allow Button(Event Player, Button(Primary Fire));
        "we still want to actually shoot while holding the button, just a tick later so the ammo manager can run."
        Wait(0.016, Ignore Condition);
        If(Is Button Held(Event Player, Button(Primary Fire)));
            Press Button(Event Player, Button(Primary Fire));
    }
}

disabled rule ("HACK: Doomfist Frame Perfect Shot") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Doomfist);
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }
    actions {
        "TODO: with good timing, doomfist can fire a shot on the same tick his ammo regenerates.\nso far, every attempt to detect this has failed.\ninfinite ammo bugs are unnaceptable, so doomfist is disabled until there is a workaround."
        Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
    }
}

rule ("HACK: Illari Negative Ammo") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Illari);
        Ammo(Event Player, 0) <= 0;
    }
    actions {
        "illari's weapon does not prevent itself from firing when out of ammo, so we need to do it ourselves."
        Disallow Button(Event Player, Button(Primary Fire));
        Wait Until(Compare(Ammo(Event Player, 0), >, 0), 999999999999999);
        Allow Button(Event Player, Button(Primary Fire));
    }
}

rule ("HACK: Hanzo Enable Abilities") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Hanzo);
        (Event Player).reserveAmmoPrimary > 0;
    }
    actions {
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
    }
}

rule ("HACK: Hanzo Disable Abilities") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Hanzo);
        (Event Player).reserveAmmoPrimary <= 0;
    }
    actions {
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        "if we run out of ammo while using storm arrows, end it early."
        Wait(0.25, Ignore Condition);
        If(Is Using Ability 2(Event Player));
            Press Button(Event Player, Button(Ability 2));
    }
}

rule ("HACK: Junkrat Ult Reload") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Junkrat);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        "this hack postpones running the ammo manager until the ultimate is finished.\nBUGBUG: out of ammo duration doesn't track during the ult with this hack. freeze out of ammo timestamp when this is true?"
        Set Player Variable(Event Player, pauseAmmoManager, True);
        Set Primary Fire Enabled(Event Player, False);
        Wait Until(Not(Is Using Ultimate(Event Player)), 999999999999999);
        "unfortunately we can't know exactly when the control entity switches back to junkrat, so this wait is longer than it needs to be."
        Wait(1.1, Ignore Condition);
        Set Player Variable(Event Player, pauseAmmoManager, False);
        Set Primary Fire Enabled(Event Player, True);
    }
}

rule ("HACK: Bastion Ult Reload") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Bastion);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        "bastion's ultimate exhibits the same problem as junkrat's, so we perform the same hack.\nBUGBUG: out of ammo duration doesn't track during the ult with this hack. freeze out of ammo timestamp when this is true?"
        Set Player Variable(Event Player, pauseAmmoManager, True);
        Set Primary Fire Enabled(Event Player, False);
        Wait Until(Not(Is Using Ultimate(Event Player)), 999999999999999);
        Set Player Variable(Event Player, pauseAmmoManager, False);
        Set Primary Fire Enabled(Event Player, True);
    }
}

rule ("HACK: Sombra Stealth Indicator") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.SHOW_ENEMY_INDICATORS == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Sombra);
        Ability Cooldown(Event Player, Button(Ability 2)) > 0;
    }
    actions {
        "when sombra is in stealth, we need to hide the ammo indicator above her head to not give her away."
        Set Player Variable(Event Player, showIndicator, False);
        "things that can exit stealth before it times out.\nTODO: hack also exits stealth, but trying to detect it is an entire project of its own."
        Wait Until(Or(Or(Or(Or(Or(Or(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Melee))), Is Button Held(Event Player, Button(Ability 1))), Is Using Ultimate(Event Player)), Has Status(Event Player, Stunned)), Has Status(Event Player, Asleep)), Has Status(Event Player, Rooted)), 5);
        Set Player Variable(Event Player, showIndicator, True);
    }
}

rule ("HACK: Tracer Recall Indicator") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.SHOW_ENEMY_INDICATORS == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Tracer);
        Is Using Ability 2(Event Player) == True;
    }
    actions {
        "tracer briefly disappears during recall."
        Set Player Variable(Event Player, showIndicator, False);
        Wait Until(Not(Is Using Ability 2(Event Player)), 999999999999999);
        Set Player Variable(Event Player, showIndicator, True);
    }
}

rule ("HACK: Bastion Turret Form Indicator") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.SHOW_ENEMY_INDICATORS == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Bastion);
        Is In Alternate Form(Event Player) == True;
    }
    actions {
        "bastion has infinite ammo in turret form, so displaying the out of ammo indicator is misleading."
        Set Player Variable(Event Player, showIndicator, False);
        Set Player Variable(Event Player, suppressNoAmmoWarning, True);
        Wait Until(Not(Is In Alternate Form(Event Player)), 999999999999999);
        Set Player Variable(Event Player, showIndicator, True);
        Set Player Variable(Event Player, suppressNoAmmoWarning, False);
    }
}

rule ("HACK: Suppress Out of Ammo Warning During Ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(Global.C_HEROES_NO_WARNING_ULT, Value In Array(All Heroes, (Event Player).heroIndex)) == True;
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        "some heroes need to use primary fire during their ultimate. we don't want to show the \"out of ammo\" warning in these cases."
        Set Player Variable(Event Player, suppressNoAmmoWarning, True);
        Wait Until(Not(Is Using Ultimate(Event Player)), 999999999999999);
        Set Player Variable(Event Player, suppressNoAmmoWarning, False);
    }
}

rule ("Custom Ammo HUD (Global)") {
    event {
        Ongoing - Global;
    }
    conditions {
        "debug huds use up a lot of our text budget, so in debug mode we use a global ammo hud which saves up to 48 text entries.\nnote that this ammo hud will not display properly in replays."
        Global.DEBUG == True;
    }
    actions {
        Create HUD Text(Local Player, Null, Custom String("{0}{1}{2}PRIMARY AMMO", If-Then-Else(Compare((Local Player).AMMO_TYPE_SECONDARY, ==, 0), Custom String("\n\n\n", Null, Null, Null), Custom String("", Null, Null, Null)), Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Null, Null, Null), Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                         ", Null, Null, Null), Null, Null), Null, Null), Null, Null)), Null, Left, 1, Null, If-Then-Else(Compare((Local Player).AMMO_TYPE_PRIMARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(221, 221, 221, 255)), (Local Player).ammoStatePrimary)), Null, Visible To String and Color, Default Visibility);
        Create HUD Text(Local Player, Null, Null, Custom String("{0}{1} {2}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                    ", Null, Null, Null), Null, Null), Null, Null), Round To Integer((Local Player).reserveAmmoPrimary, Up), Custom String("{0}fgDDDDDDAA>/ {1}", Global.bracket, (Local Player).MAX_RESERVE_AMMO_PRIMARY, Null)), Left, 2, Null, Null, If-Then-Else(Compare((Local Player).AMMO_TYPE_PRIMARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Color(White)), (Local Player).ammoStatePrimary)), Visible To String and Color, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("\n\n{0}SECONDARY AMMO", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                         ", Null, Null, Null), Null, Null), Null, Null), Null, Null), Null, Null), Null, Left, 3, Null, If-Then-Else(Compare((Local Player).AMMO_TYPE_SECONDARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(221, 221, 221, 255)), (Local Player).ammoStateSecondary)), Null, Visible To String and Color, Default Visibility);
        Create HUD Text(Local Player, Null, Null, Custom String("{0}{1} {2}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                    ", Null, Null, Null), Null, Null), Null, Null), Round To Integer((Local Player).reserveAmmoSecondary, Up), Custom String("{0}fgDDDDDDAA>/ {1}", Global.bracket, (Local Player).MAX_RESERVE_AMMO_SECONDARY, Null)), Left, 4, Null, Null, If-Then-Else(Compare((Local Player).AMMO_TYPE_SECONDARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Color(White)), (Local Player).ammoStateSecondary)), Visible To String and Color, Default Visibility);
    }
}

rule ("Custom Ammo HUD Replay Padding") {
    event {
        Ongoing - Global;
    }
    actions {
        "when viewing a replay, the ammo hud is pushed down by the team overlay at the top of the screen.\nthese newlines will display in-game but not in replays, so the hud will be offset to the correct position."
        Create HUD Text(Local Player, Null, Custom String("\n\n\n\n", Null, Null, Null), Null, Left, 0, Null, Color(White), Null, Visible To and String, Visible Never);
    }
}

rule ("Custom Ammo HUD (Each Player)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        "with debug mode off, we create an ammo hud per-player so we can view them in replays."
        Global.DEBUG == False;
    }
    actions {
        Create HUD Text(Event Player, Null, Custom String("{0}{1}{2}PRIMARY AMMO", If-Then-Else(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 0), Custom String("\n\n\n", Null, Null, Null), Custom String("", Null, Null, Null)), Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Null, Null, Null), Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                         ", Null, Null, Null), Null, Null), Null, Null), Null, Null)), Null, Left, 1, Null, If-Then-Else(Compare((Event Player).AMMO_TYPE_PRIMARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(221, 221, 221, 255)), (Event Player).ammoStatePrimary)), Null, Visible To String and Color, Default Visibility);
        Create HUD Text(Event Player, Null, Null, Custom String("{0}{1} {2}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                    ", Null, Null, Null), Null, Null), Null, Null), Round To Integer((Event Player).reserveAmmoPrimary, Up), Custom String("{0}fgDDDDDDAA>/ {1}", Global.bracket, (Event Player).MAX_RESERVE_AMMO_PRIMARY, Null)), Left, 2, Null, Null, If-Then-Else(Compare((Event Player).AMMO_TYPE_PRIMARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Color(White)), (Event Player).ammoStatePrimary)), Visible To String and Color, Default Visibility);
        Create HUD Text(Event Player, Null, Custom String("\n\n{0}SECONDARY AMMO", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                         ", Null, Null, Null), Null, Null), Null, Null), Null, Null), Null, Null), Null, Left, 3, Null, If-Then-Else(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(221, 221, 221, 255)), (Event Player).ammoStateSecondary)), Null, Visible To String and Color, Default Visibility);
        Create HUD Text(Event Player, Null, Null, Custom String("{0}{1} {2}", Custom String("                                                                                                                          {0}", Custom String("                                                                                                                          {0}", Custom String("                                                                    ", Null, Null, Null), Null, Null), Null, Null), Round To Integer((Event Player).reserveAmmoSecondary, Up), Custom String("{0}fgDDDDDDAA>/ {1}", Global.bracket, (Event Player).MAX_RESERVE_AMMO_SECONDARY, Null)), Left, 4, Null, Null, If-Then-Else(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 0), Custom Color(0, 0, 0, 0), Value In Array(Array(Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Color(White)), (Event Player).ammoStateSecondary)), Visible To String and Color, Default Visibility);
    }
}

rule ("Out of Ammo Indicators") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        "indicator for enemies."
        If(Global.SHOW_ENEMY_INDICATORS);
            Create In-World Text(If-Then-Else(And(And(Is Alive(Event Player), (Event Player).showIndicator), And(And(Or(Compare((Event Player).AMMO_TYPE_PRIMARY, !=, 0), Compare((Event Player).AMMO_TYPE_SECONDARY, !=, 0)), Compare((Event Player).ammoStatePrimary, ==, 0)), Compare((Event Player).ammoStateSecondary, ==, 0))), All Players(Opposite Team Of(Team Of(Event Player))), Null), Custom String("×", Null, Null, Null), Event Player, 2, Clip Against Surfaces, Visible To Position and String, Custom Color(255, 59, 103, 255), Default Visibility);
        End;
        "indicator for teammates / spectators / replays."
        Create In-World Text(All Players(Team Of(Event Player)), If-Then-Else(And(Is Alive(Event Player), Or(And(Compare((Event Player).AMMO_TYPE_PRIMARY, !=, 0), Compare((Event Player).ammoStatePrimary, !=, 2)), And(Compare((Event Player).AMMO_TYPE_SECONDARY, !=, 0), Compare((Event Player).ammoStateSecondary, !=, 2)))), If-Then-Else(And(Compare((Event Player).ammoStatePrimary, ==, 0), Compare((Event Player).ammoStateSecondary, ==, 0)), Custom String("×", Null, Null, Null), Custom String("!", Null, Null, Null)), Custom String("", Null, Null, Null)), Event Player, 2, Do Not Clip, Visible To Position String and Color, If-Then-Else(And(Compare((Event Player).ammoStatePrimary, ==, 0), Compare((Event Player).ammoStateSecondary, ==, 0)), Color(White), Custom Color(255, 200, 60, 255)), Visible Always);
    }
}

rule ("Player Changed Hero") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Call Subroutine(resetPlayerState);
        Set Player Variable(Event Player, wasDuplicating, False);
        Call Subroutine(updateHeroIndex);
        Call Subroutine(cacheAmmoData);
        Call Subroutine(refillReserveAmmo);
        "re-fire rule when the player changes hero."
        Wait Until(Compare(Hero Of(Event Player), !=, Evaluate Once(Hero Of(Event Player))), 999999999999999);
        Loop;
    }
}

rule ("Primary Ammo is Empty") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Or(Compare((Event Player).AMMO_TYPE_PRIMARY, ==, 0), And(Compare((Event Player).reserveAmmoPrimary, <=, 0), Compare(Ammo(Event Player, 0), <=, 0))) == True;
    }
    actions {
        Set Player Variable(Event Player, ammoStatePrimary, 0);
    }
}

rule ("Primary Ammo is Low") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY != 0;
        Add((Event Player).reserveAmmoPrimary, Ammo(Event Player, 0)) > 0;
        "TODO: should the low ammo threshold count max clip size + max reserve size?"
        Add((Event Player).reserveAmmoPrimary, Ammo(Event Player, 0)) <= Multiply((Event Player).MAX_RESERVE_AMMO_PRIMARY, 0.33);
    }
    actions {
        Set Player Variable(Event Player, ammoStatePrimary, 1);
    }
}

rule ("Primary Ammo is High") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY != 0;
        Add((Event Player).reserveAmmoPrimary, Ammo(Event Player, 0)) > Multiply((Event Player).MAX_RESERVE_AMMO_PRIMARY, 0.33);
    }
    actions {
        Set Player Variable(Event Player, ammoStatePrimary, 2);
    }
}

rule ("Secondary Ammo is Empty") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Or(Compare((Event Player).AMMO_TYPE_SECONDARY, ==, 0), And(Compare((Event Player).reserveAmmoSecondary, <=, 0), Compare(Ammo(Event Player, 1), <=, 0))) == True;
    }
    actions {
        Set Player Variable(Event Player, ammoStateSecondary, 0);
    }
}

rule ("Secondary Ammo is Low") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY != 0;
        Add((Event Player).reserveAmmoSecondary, Ammo(Event Player, 1)) > 0;
        Add((Event Player).reserveAmmoSecondary, Ammo(Event Player, 1)) <= Multiply((Event Player).MAX_RESERVE_AMMO_SECONDARY, 0.33);
    }
    actions {
        Set Player Variable(Event Player, ammoStateSecondary, 1);
    }
}

rule ("Secondary Ammo is High") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY != 0;
        Add((Event Player).reserveAmmoSecondary, Ammo(Event Player, 1)) > Multiply((Event Player).MAX_RESERVE_AMMO_SECONDARY, 0.33);
    }
    actions {
        Set Player Variable(Event Player, ammoStateSecondary, 2);
    }
}

rule ("Forget Cached Ammo on Death") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Is Dead(Event Player) == True;
    }
    actions {
        "dying and respawning causes an unnatural change in current ammo,\nso we want the next execution of the ammo manager to begin in a clean, new state."
        Set Player Variable(Event Player, cachedAmmoPrimary, -1);
        Set Player Variable(Event Player, cachedAmmoSecondary, -1);
    }
}

rule ("Ammo Manager (Primary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        Is Alive(Event Player) == True;
        (Event Player).pauseAmmoManager == False;
        Ammo(Event Player, 0) != (Event Player).cachedAmmoPrimary;
    }
    actions {
        "ensure our ammo is cached first."
        If(Compare((Event Player).cachedAmmoPrimary, !=, -1));
            "if the player's ammo increased, deplete from reserve ammo."
            If(Compare(Ammo(Event Player, 0), >, (Event Player).cachedAmmoPrimary));
                Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, Subtract(Ammo(Event Player, 0), (Event Player).cachedAmmoPrimary));
                "we're out of reserve ammo."
                If(Compare((Event Player).reserveAmmoPrimary, <=, 0));
                    "HACKHACK: don't let symmetra retain infinite ammo by beaming shields."
                    If(And(Compare((Event Player).heroIndex, ==, Index Of Array Value(All Heroes, Hero(Symmetra))), Is Firing Primary(Event Player)));
                        Modify Player Variable(Event Player, reserveAmmoPrimary, Multiply, 3);
                    End;
                    "trim negative reserve ammo off the new clip since we can't afford it."
                    Set Ammo(Event Player, 0, Add(Ammo(Event Player, 0), (Event Player).reserveAmmoPrimary));
                    Set Player Variable(Event Player, reserveAmmoPrimary, 0);
                End;
            Else;
                If(And(Global.LOG_STATS, Is Game In Progress));
                    Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, Subtract((Event Player).cachedAmmoPrimary, Ammo(Event Player, 0)));
                End;
            End;
        End;
        "cache new ammo amount."
        Set Player Variable(Event Player, cachedAmmoPrimary, Ammo(Event Player, 0));
        "wait and loop actions are required to handle continuous ammo depletion."
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Ammo Manager (Secondary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY == 1;
        Is Alive(Event Player) == True;
        (Event Player).pauseAmmoManager == False;
        Ammo(Event Player, 1) != (Event Player).cachedAmmoSecondary;
    }
    actions {
        "ensure our ammo is cached first."
        If(Compare((Event Player).cachedAmmoSecondary, !=, -1));
            "if the player's ammo increased, deplete from reserve ammo."
            If(Compare(Ammo(Event Player, 1), >, (Event Player).cachedAmmoSecondary));
                Modify Player Variable(Event Player, reserveAmmoSecondary, Subtract, Subtract(Ammo(Event Player, 1), (Event Player).cachedAmmoSecondary));
                "we're out of reserve ammo."
                If(Compare((Event Player).reserveAmmoSecondary, <, 0));
                    "trim negative reserve ammo off the new clip since we can't afford it."
                    Set Ammo(Event Player, 1, Add(Ammo(Event Player, 1), (Event Player).reserveAmmoSecondary));
                    Set Player Variable(Event Player, reserveAmmoSecondary, 0);
                End;
            Else;
                If(And(Global.LOG_STATS, Is Game In Progress));
                    Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, Subtract((Event Player).cachedAmmoSecondary, Ammo(Event Player, 1)));
                End;
            End;
        End;
        "cache new ammo amount."
        Set Player Variable(Event Player, cachedAmmoSecondary, Ammo(Event Player, 1));
        "wait and loop actions are required to handle continuous ammo depletion."
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Custom Ammo Manager (Hanzo)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Hanzo);
        Is Alive(Event Player) == True;
        Is Firing Primary(Event Player) == True;
    }
    actions {
        "storm arrows fire instantly, so count them instantly."
        If(Is Using Ability 2(Event Player));
            Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
            If(And(Global.LOG_STATS, Is Game In Progress));
                Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
            End;
        "when hanzo stops drawing back his bow, we assume he fired an arrow (with exceptions)."
        Else;
            Wait Until(Not(Is Firing Primary(Event Player)), 999999999999999);
            If(Not(Or(Or(Or(Or(Or(Or(Or(Is Dead(Event Player), Is Button Held(Event Player, Button(Secondary Fire))), Is Meleeing(Event Player)), And(Compare(Ability Cooldown(Event Player, Button(Ability 2)), <=, 0), Is Button Held(Event Player, Button(Ability 2)))), Is On Wall(Event Player)), Is Using Ultimate(Event Player)), Has Status(Event Player, Stunned)), Has Status(Event Player, Asleep))));
                Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
                If(And(Global.LOG_STATS, Is Game In Progress));
                    Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
    }
}

rule ("Custom Ammo Manager (Sigma)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Sigma);
        Is Alive(Event Player) == True;
        Is Firing Primary(Event Player) == True;
    }
    actions {
        "sigma uses 2 ammo per shot, but we only deplete the second ammo if nothing has cancelled primary fire."
        Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
        If(And(Global.LOG_STATS, Is Game In Progress));
            Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
        End;
        Wait(0.176, Ignore Condition);
        If(Not(Or(Or(Or(Or(Or(Or(Is Dead(Event Player), Is Meleeing(Event Player)), Is Using Ability 1(Event Player)), Is Using Ability 2(Event Player)), Is Using Ultimate(Event Player)), Has Status(Event Player, Stunned)), Has Status(Event Player, Asleep))));
            Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
            If(And(Global.LOG_STATS, Is Game In Progress));
                Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
    }
}

rule ("Custom Ammo Manager (D.Va)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(D.Va);
        (Event Player).AMMO_TYPE_PRIMARY == 2;
        Is Alive(Event Player) == True;
        (Event Player).reserveAmmoPrimary > 0;
        Is Firing Primary(Event Player) == True;
    }
    actions {
        Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
        If(And(Global.LOG_STATS, Is Game In Progress));
            Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
        End;
        Wait(0.15, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Custom Ammo Manager (Orisa)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Orisa);
        Is Alive(Event Player) == True;
        (Event Player).reserveAmmoPrimary > 0;
        Is Firing Primary(Event Player) == True;
    }
    actions {
        Modify Player Variable(Event Player, reserveAmmoPrimary, Subtract, 1);
        If(And(Global.LOG_STATS, Is Game In Progress));
            Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
        End;
        "we early-out if primary fire is released to sync up with the weapon firing bullets."
        Wait Until(Not(Is Firing Primary(Event Player)), 0.1);
        Loop If Condition Is True;
    }
}

rule ("Custom Ammo Manager (Moira)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Moira);
        Is Alive(Event Player) == True;
        (Event Player).reserveAmmoSecondary > 0;
        Is Firing Secondary(Event Player) == True;
    }
    actions {
        "ever since her release, moira has had an exploit allowing her to quickly recharge healing by spamming right click.\nif this custom fire rate seems odd, it's tuned to use roughly the same amount of ammo with and without this exploit."
        Modify Player Variable(Event Player, reserveAmmoSecondary, Subtract, 1);
        If(And(Global.LOG_STATS, Is Game In Progress));
            Modify Global Variable At Index(stats_AmmoConsumed, (Event Player).heroIndex, Add, 1);
        End;
        "we early-out if secondary fire is released to prevent the aforementioned exploit."
        Wait Until(Not(Is Firing Secondary(Event Player)), 0.33);
        Loop If Condition Is True;
    }
}

rule ("Disable Weapon (Primary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 2;
        (Event Player).reserveAmmoPrimary <= 0;
    }
    actions {
        Disallow Button(Event Player, Button(Primary Fire));
    }
}

rule ("Enable Weapon (Primary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 2;
        (Event Player).reserveAmmoPrimary > 0;
    }
    actions {
        "BUGBUG: cannot fire weapon when holding the button while gaining ammo."
        Allow Button(Event Player, Button(Primary Fire));
    }
}

rule ("Disable Weapon (Secondary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY == 2;
        (Event Player).reserveAmmoSecondary <= 0;
    }
    actions {
        Disallow Button(Event Player, Button(Secondary Fire));
    }
}

rule ("Enable Weapon (Secondary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY == 2;
        (Event Player).reserveAmmoSecondary > 0;
    }
    actions {
        "BUGBUG: cannot fire weapon when holding the button while gaining ammo."
        Allow Button(Event Player, Button(Secondary Fire));
    }
}

rule ("Disable Reload (Single Ammo Weapon)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        (Event Player).AMMO_TYPE_SECONDARY == 0;
        (Event Player).reserveAmmoPrimary <= 0;
    }
    actions {
        Disallow Button(Event Player, Button(Reload));
        "instantly disabling reload cancels the reload animation, which causes ugly viewmodel teleporting.\nwe wait a bit to fully disable reload except for heroes where it must happen instantly."
        If(Not(Array Contains(Global.C_HEROES_QUICK_DISABLE_RELOAD, Value In Array(All Heroes, (Event Player).heroIndex))));
            Wait(1, Abort When False);
        End;
        Set Reload Enabled(Event Player, False);
    }
}

rule ("Enable Reload (Single Ammo Weapon)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        (Event Player).AMMO_TYPE_SECONDARY == 0;
        (Event Player).reserveAmmoPrimary > 0;
    }
    actions {
        Allow Button(Event Player, Button(Reload));
        Set Reload Enabled(Event Player, True);
    }
}

rule ("Disable Reload (Dual Ammo Weapon)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        (Event Player).AMMO_TYPE_SECONDARY == 1;
        Or(Compare((Event Player).reserveAmmoPrimary, <=, 0), Compare(Ammo(Event Player, 0), >=, Max Ammo(Event Player, 0))) == True;
        Or(Compare((Event Player).reserveAmmoSecondary, <=, 0), Compare(Ammo(Event Player, 1), >=, Max Ammo(Event Player, 1))) == True;
    }
    actions {
        Disallow Button(Event Player, Button(Reload));
        Set Reload Enabled(Event Player, False);
    }
}

rule ("Auto Reload (Dual Ammo Weapon)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        (Event Player).AMMO_TYPE_SECONDARY == 1;
        Or(And(Compare((Event Player).reserveAmmoPrimary, >, 0), Compare(Ammo(Event Player, 0), <=, 0)), And(Compare((Event Player).reserveAmmoSecondary, >, 0), Compare(Ammo(Event Player, 1), <=, 0))) == True;
    }
    actions {
        "auto-reload only if we have reserve ammo for an empty clip."
        Allow Button(Event Player, Button(Reload));
        Set Reload Enabled(Event Player, True);
    }
}

rule ("Manual Reload (Dual Ammo Weapon)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY == 1;
        (Event Player).AMMO_TYPE_SECONDARY == 1;
        Or(And(Compare((Event Player).reserveAmmoPrimary, >, 0), Compare(Ammo(Event Player, 0), <, Max Ammo(Event Player, 0))), And(Compare((Event Player).reserveAmmoSecondary, >, 0), Compare(Ammo(Event Player, 1), <, Max Ammo(Event Player, 1)))) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
    }
    actions {
        "reloading is usually disabled, so we intercept the player's reload key to actually perform a reload."
        Allow Button(Event Player, Button(Reload));
        Set Reload Enabled(Event Player, True);
        Press Button(Event Player, Button(Reload));
    }
}

rule ("Negative Ammo Failsafe (Primary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).reserveAmmoPrimary < 0;
    }
    actions {
        Set Player Variable(Event Player, reserveAmmoPrimary, 0);
    }
}

rule ("Negative Ammo Failsafe (Secondary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).reserveAmmoSecondary < 0;
    }
    actions {
        Set Player Variable(Event Player, reserveAmmoSecondary, 0);
    }
}

rule ("No Ammo Warning (Primary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_PRIMARY != 0;
        Is Alive(Event Player) == True;
        (Event Player).ammoStatePrimary == 0;
        (Event Player).suppressNoAmmoWarning == False;
        Or(Is Button Held(Event Player, Button(Primary Fire)), And(Compare((Event Player).HAS_ALT_FIRE, ==, True), Is Button Held(Event Player, Button(Secondary Fire)))) == True;
    }
    actions {
        Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
        Small Message(Event Player, Custom String("  {0} OUT OF AMMO", Ability Icon String(Value In Array(All Heroes, (Event Player).heroIndex), Button(Primary Fire)), Null, Null));
        Wait(3, Ignore Condition);
    }
}

rule ("No Ammo Warning (Secondary)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        (Event Player).AMMO_TYPE_SECONDARY != 0;
        Is Alive(Event Player) == True;
        (Event Player).ammoStateSecondary == 0;
        (Event Player).suppressNoAmmoWarning == False;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }
    actions {
        Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
        Small Message(Event Player, Custom String("  {0} OUT OF AMMO", Ability Icon String(Value In Array(All Heroes, (Event Player).heroIndex), Button(Secondary Fire)), Null, Null));
        Wait(3, Ignore Condition);
    }
}

rule ("Give Ammo: Player Touched Ammo Pack") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.AMMO_PACK_POSITIONS == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).canCollectPacks == True;
        Or(Compare((Event Player).reserveAmmoPrimary, <, (Event Player).MAX_RESERVE_AMMO_PRIMARY), Compare((Event Player).reserveAmmoSecondary, <, (Event Player).MAX_RESERVE_AMMO_SECONDARY)) == True;
        Is True For Any(Global.AMMO_PACK_POSITIONS, Compare(Distance Between(Position Of(Event Player), Current Array Element), <, 1.1)) == True;
    }
    actions {
        "logically, the ammo pack that was touched must be the one closest to the player,\nso here we sort all ammo packs by distance and store the nearest pack's index."
        Set Player Variable(Event Player, touchedPackIndex, Index Of Array Value(Global.AMMO_PACK_POSITIONS, First Of(Sorted Array(Global.AMMO_PACK_POSITIONS, Distance Between(Position Of(Event Player), Current Array Element)))));
        "only allow the player to collect the ammo pack if its cooldown has expired."
        If(Compare(Total Time Elapsed, >, Add(Value In Array(Global.AMMO_PACK_TIMESTAMPS, (Event Player).touchedPackIndex), Global.AMMO_PACK_RESPAWN_TIME)));
            Set Global Variable At Index(AMMO_PACK_TIMESTAMPS, (Event Player).touchedPackIndex, Total Time Elapsed);
            Call Subroutine(givePlayerAmmo);
            If(And(Global.LOG_STATS, Is Game In Progress));
                Modify Global Variable At Index(stats_AmmoPacksCollected, (Event Player).heroIndex, Add, 1);
    }
}

rule ("Give Ammo: Player is in Spawn Room") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is In Spawn Room(Event Player) == True;
        Or(Compare((Event Player).reserveAmmoPrimary, <, (Event Player).MAX_RESERVE_AMMO_PRIMARY), Compare((Event Player).reserveAmmoSecondary, <, (Event Player).MAX_RESERVE_AMMO_SECONDARY)) == True;
    }
    actions {
        Call Subroutine(givePlayerAmmo);
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Give Ammo: Player Respawned") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        "this also fires when revived by mercy."
        Is Alive(Event Player) == True;
    }
    actions {
        Call Subroutine(refillReserveAmmo);
    }
}

rule ("STATISTICS: Player Joined") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Match Complete == False;
    }
    actions {
        "allow player variables to initialize before continuing."
        Wait(0.064, Ignore Condition);
        "we need this player's absolute slot between 0 and 11."
        Set Player Variable(Event Player, SLOT_INDEX, Add(Slot Of(Event Player), If-Then-Else(Compare(Team Of(Event Player), ==, Team 2), 6, 0)));
        Set Global Variable At Index(g_PlayerIsInSlot, (Event Player).SLOT_INDEX, True);
        Set Global Variable At Index(g_PlayerEntities, (Event Player).SLOT_INDEX, Event Player);
        Set Global Variable At Index(g_PlayerHeroIndices, (Event Player).SLOT_INDEX, -1);
    }
}

rule ("STATISTICS: Player Disconnected, Save Stats") {
    event {
        Player Left Match;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Match Complete == False;
    }
    actions {
        "we can't directly detect which player left, so loop through the global entity array to see who's missing."
        For Global Variable(s, 0, 12, 1);
            If(And(Compare(Value In Array(Global.g_PlayerIsInSlot, Global.s), ==, True), Not(Entity Exists(Value In Array(Global.g_PlayerEntities, Global.s)))));
                "this player has left, commit duration stats."
                If(Compare(Value In Array(Global.g_PlayerHeroIndices, Global.s), !=, -1));
                    If(Compare(Value In Array(Global.g_TimestampsPlaytime, Global.s), >, 0));
                        Modify Global Variable At Index(stats_DurationPlaytime, Value In Array(Global.g_PlayerHeroIndices, Global.s), Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsPlaytime, Global.s)));
                    End;
                    If(Compare(Value In Array(Global.g_TimestampsAlive, Global.s), >, 0));
                        Modify Global Variable At Index(stats_DurationAlive, Value In Array(Global.g_PlayerHeroIndices, Global.s), Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsAlive, Global.s)));
                    End;
                    If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, Global.s), >, 0));
                        Modify Global Variable At Index(stats_DurationOutOfAmmo, Value In Array(Global.g_PlayerHeroIndices, Global.s), Add, Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, Global.s)));
                    End;
                End;
                Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} (slot {2}", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Value In Array(Global.g_PlayerEntities, Global.s), Custom String("{0}) left the game with heroIndex {1} ({2}", Global.s, Value In Array(Global.g_PlayerHeroIndices, Global.s), Custom String("{0} | {1} • {2}", Total Time Elapsed, Value In Array(Global.g_TimestampsPlaytime, Global.s), Custom String("{0} • {1})", Value In Array(Global.g_TimestampsAlive, Global.s), Value In Array(Global.g_TimestampsOutOfAmmo, Global.s), Null)))));
                "this slot is now vacant."
                Set Global Variable At Index(g_PlayerIsInSlot, Global.s, False);
                Set Global Variable At Index(g_TimestampsPlaytime, Global.s, 0);
                Set Global Variable At Index(g_TimestampsAlive, Global.s, 0);
                Set Global Variable At Index(g_TimestampsOutOfAmmo, Global.s, 0);
                "we found them, so we're done!"
                Abort;
            End;
        End;
    }
}

rule ("STATISTICS: Replay Duration") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.LOG_STATS == True;
        Is In Setup == True;
    }
    actions {
        "time elapsed since the server began recording the replay."
        Chase Global Variable At Rate(stats_ReplayDuration, 999999999999999, 1, None);
    }
}

rule ("STATISTICS: Match Duration Resume") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Game In Progress == True;
    }
    actions {
        Chase Global Variable At Rate(stats_MatchDuration, 999999999999999, 1, None);
    }
}

rule ("STATISTICS: Match Duration Pause") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Game In Progress == False;
    }
    actions {
        Stop Chasing Global Variable(stats_MatchDuration);
    }
}

rule ("STATISTICS: Commit All Timestamps Between Rounds") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == False;
    }
    actions {
        Call Subroutine(commitDurationPlaytime);
        Call Subroutine(commitDurationAlive);
        Call Subroutine(commitDurationOutOfAmmo);
    }
}

rule ("STATISTICS: Set Timestamp: Hero Playtime") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == True;
    }
    actions {
        Set Global Variable At Index(g_TimestampsPlaytime, (Event Player).SLOT_INDEX, Total Time Elapsed);
    }
}

rule ("STATISTICS: Set Timestamp: Alive") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == True;
        Is Alive(Event Player) == True;
    }
    actions {
        Set Global Variable At Index(g_TimestampsAlive, (Event Player).SLOT_INDEX, Total Time Elapsed);
    }
}

rule ("STATISTICS: Set Timestamp: Out of Ammo") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == True;
        "we only care about heroes who can have ammo."
        Or(Compare((Event Player).AMMO_TYPE_PRIMARY, !=, 0), Compare((Event Player).AMMO_TYPE_SECONDARY, !=, 0)) == True;
        (Event Player).ammoStatePrimary == 0;
        (Event Player).ammoStateSecondary == 0;
    }
    actions {
        Set Global Variable At Index(g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX, Total Time Elapsed);
    }
}

rule ("STATISTICS: Commit Timestamp: Out of Ammo") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == True;
        Or(Compare((Event Player).ammoStatePrimary, !=, 0), Compare((Event Player).ammoStateSecondary, !=, 0)) == True;
    }
    actions {
        Call Subroutine(commitDurationOutOfAmmo);
    }
}

rule ("STATISTICS: Player Is Reloading") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Game In Progress == True;
        Is Reloading(Event Player) == True;
    }
    actions {
        Modify Global Variable At Index(stats_TimesReloaded, (Event Player).heroIndex, Add, 1);
    }
}

rule ("STATISTICS: Player Earned Kill") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Game In Progress == True;
        (Attacker).heroIndex != -1;
    }
    actions {
        Modify Global Variable At Index(stats_Kills, (Attacker).heroIndex, Add, 1);
        "the player earned this kill while out of ammo."
        If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Attacker).SLOT_INDEX), >, 0));
            Modify Global Variable At Index(stats_KillsOutOfAmmo, (Attacker).heroIndex, Add, 1);
            Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} ({2}", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Attacker, Custom String("{0}) killed {1} ({2}", Value In Array(All Heroes, (Attacker).heroIndex), Victim, Custom String("{0}) while out of ammo for {1} seconds.", Value In Array(All Heroes, (Victim).heroIndex), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Attacker).SLOT_INDEX)), Null))));
    }
}

rule ("STATISTICS: Player Died") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Is Game In Progress == True;
        (Event Player).heroIndex != -1;
        Is Dead(Event Player) == True;
    }
    actions {
        Modify Global Variable At Index(stats_Deaths, (Event Player).heroIndex, Add, 1);
        "the player died while out of ammo."
        If(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX), >, 0));
            Modify Global Variable At Index(stats_DeathsOutOfAmmo, (Event Player).heroIndex, Add, 1);
            Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} ({2}", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Event Player, Custom String("{0}) died while out of ammo for {1} seconds.", Value In Array(All Heroes, (Event Player).heroIndex), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX)), Null)));
        End;
        "out of ammo duration will be compared to alive duration, so both are committed on death."
        Call Subroutine(commitDurationAlive);
        Call Subroutine(commitDurationOutOfAmmo);
    }
}

rule ("STATISTICS: Soldier Out of Ammo During Ult") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.LOG_STATS == True;
        Has Spawned(Event Player) == True;
        Value In Array(All Heroes, (Event Player).heroIndex) == Hero(Soldier: 76);
        Is Game In Progress == True;
        Value In Array(Global.g_TimestampsOutOfAmmo, (Event Player).SLOT_INDEX) > 0;
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Modify Global Variable(stats_Highlights, Append To Array, Custom String("[{0}] {1} ({2}) ran out of ammo while using tactical visor.", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Event Player, Value In Array(All Heroes, (Event Player).heroIndex)));
    }
}

rule ("STATISTICS: Write Stats to Log File") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.LOG_STATS == True;
        Is Match Complete == True;
    }
    actions {
        Wait(0.25, Ignore Condition);
        Enable Inspector Recording;
        Log To Inspector(Custom String("—————————————————————————————————————————————————\n", Null, Null, Null));
        Log To Inspector(Custom String("LIMITED AMMO PLAYTEST RESULTS\n", Null, Null, Null));
        Log To Inspector(Custom String("—————————————————————————————————————————————————\n", Null, Null, Null));
        Log To Inspector(Custom String("Session: Playtest 04\n", Null, Null, Null));
        Log To Inspector(Custom String("Gamemode: {0}", Current Game Mode, Null, Null));
        Log To Inspector(Custom String("Map: {0}", Current Map, Null, Null));
        Log To Inspector(Custom String("Match Duration: {0}", Global.stats_MatchDuration, Null, Null));
        Log To Inspector(Custom String("Replay Duration: {0}\n", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Null, Null));
        Log To Inspector(Custom String("—————————————————————————————————————————————————\n", Null, Null, Null));
        "build strings from arrays."
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(Global.C_HEROES_DISABLED), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.C_HEROES_DISABLED, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("C_HEROES_DISABLED = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(All Heroes, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("getAllHeroes() = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_DurationPlaytime, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_DurationPlaytime = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_DurationAlive, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_DurationAlive = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_DurationOutOfAmmo, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_DurationOutOfAmmo = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_AmmoConsumed, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_AmmoConsumed = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_TimesReloaded, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_TimesReloaded = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_AmmoPacksCollected, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_AmmoPacksCollected = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_Kills, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_Kills = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_KillsOutOfAmmo, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_KillsOutOfAmmo = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_Deaths, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_Deaths = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        Set Global Variable(str, Custom String("[", Null, Null, Null));
        For Global Variable(i, 0, Count Of(All Heroes), 1);
            Set Global Variable(str, Custom String("{0}{1}{2}", Global.str, If-Then-Else(Compare(Global.i, ==, 0), Custom String("", Null, Null, Null), Custom String(", ", Null, Null, Null)), Value In Array(Global.stats_DeathsOutOfAmmo, Global.i)));
        End;
        Set Global Variable(str, Custom String("{0}]", Global.str, Null, Null));
        Log To Inspector(Custom String("stats_DeathsOutOfAmmo = {0}\n", Global.str, Null, Null));
        Wait(0.016, Ignore Condition);
        If(Global.stats_Highlights);
            Log To Inspector(Custom String("—————————————————————————————————————————————————\n", Null, Null, Null));
            Log To Inspector(Custom String("Highlights:\n", Null, Null, Null));
            For Global Variable(i, 0, Count Of(Global.stats_Highlights), 1);
                Log To Inspector(Value In Array(Global.stats_Highlights, Global.i));
                Wait(0.016, Ignore Condition);
            End;
    }
}

disabled rule ("DEBUG: Current Game Mode") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
    }
    actions {
        "we still can't do direct game mode comparisons..."
        Create HUD Text(Local Player, Null, Custom String("GAME MODE: {0}fgFFFFFFFF>{1}{2}", Global.bracket, Current Game Mode, Custom String("                                                                                                                                                                          ", Null, Null, Null)), Null, Top, 20, Null, Custom Color(255, 127, 88, 255), Null, Visible To and String, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("IS CONTROL? {0}fgFFFFFFFF>{1}\n{2}", Global.bracket, If-Then-Else(Compare(Current Game Mode, ==, Game Mode(Control)), Custom String("TRUE", Null, Null, Null), Custom String("FALSE", Null, Null, Null)), Custom String("                                                                                                                                                                          ", Null, Null, Null)), Null, Top, 20, Null, Custom Color(238, 227, 73, 255), Null, Visible To and String, Default Visibility);
    }
}

rule ("DEBUG: Server Load") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
    }
    actions {
        Create HUD Text(Local Player, Null, Custom String("CURRENT LOAD: {0}fgFFFFFFFF>{1}%{2}", Global.bracket, Update Every Frame(Server Load), Custom String("                                                                                                                                                                          ", Null, Null, Null)), Null, Top, 10, Null, Custom Color(255, 170, 120, 255), Null, Visible To and String, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("AVERAGE LOAD: {0}fgFFFFFFFF>{1}%{2}", Global.bracket, Update Every Frame(Server Load Average), Custom String("                                                                                                                                                                          ", Null, Null, Null)), Null, Top, 10, Null, Custom Color(255, 190, 110, 255), Null, Visible To and String, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("PEAK LOAD: {0}fgFFFFFFFF>{1}%\n{2}", Global.bracket, Update Every Frame(Server Load Peak), Custom String("                                                                                                                                                                          ", Null, Null, Null)), Null, Top, 10, Null, Custom Color(255, 210, 100, 255), Null, Visible To and String, Default Visibility);
    }
}

rule ("DEBUG: Display g_ Arrays") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
        Global.LOG_STATS == True;
    }
    actions {
        Wait(5, Ignore Condition);
        For Global Variable(d, 0, 12, 1);
            Create HUD Text(Local Player, Null, Custom String("[{0}] {1} | {2}", Evaluate Once(Global.d), Value In Array(Global.g_PlayerEntities, Evaluate Once(Global.d)), Value In Array(Global.g_PlayerHeroIndices, Evaluate Once(Global.d))), Null, Right, -10, Null, If-Then-Else(Compare(Value In Array(Global.g_PlayerEntities, Evaluate Once(Global.d)), ==, Null), Custom Color(210, 210, 210, 255), If-Then-Else(Entity Exists(Value In Array(Global.g_PlayerEntities, Evaluate Once(Global.d))), Color(Turquoise), Custom Color(255, 110, 130, 255))), Null, Visible To String and Color, Default Visibility);
        End;
    }
}

rule ("DEBUG: Display Durations") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
        Global.LOG_STATS == True;
    }
    actions {
        Create HUD Text(Local Player, Null, Custom String("Duration Playtime: {0}fgFFFFFFFF>{1}", Global.bracket, If-Then-Else(Compare(Value In Array(Global.g_TimestampsPlaytime, (Local Player).SLOT_INDEX), >, 0), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsPlaytime, (Local Player).SLOT_INDEX)), 0), Null), Null, Right, -30, Null, Custom Color(210, 210, 210, 255), Null, Visible To and String, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("Duration Alive: {0}fgFFFFFFFF>{1}", Global.bracket, If-Then-Else(Compare(Value In Array(Global.g_TimestampsAlive, (Local Player).SLOT_INDEX), >, 0), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsAlive, (Local Player).SLOT_INDEX)), 0), Null), Null, Right, -30, Null, Custom Color(210, 210, 210, 255), Null, Visible To and String, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("Duration Out of Ammo: {0}fgFFFFFFFF>{1}\n", Global.bracket, If-Then-Else(Compare(Value In Array(Global.g_TimestampsOutOfAmmo, (Local Player).SLOT_INDEX), >, 0), Subtract(Total Time Elapsed, Value In Array(Global.g_TimestampsOutOfAmmo, (Local Player).SLOT_INDEX)), 0), Null), Null, Right, -30, Null, Custom Color(210, 210, 210, 255), Null, Visible To and String, Default Visibility);
    }
}

rule ("DEBUG: Text & Effect Limits") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
    }
    actions {
        Create HUD Text(Local Player, Null, Custom String("Text Count: {0}fgFFFFFFFF>{1} / {2}", Global.bracket, Text Count, 128), Null, Right, -60, Null, If-Then-Else(Compare(Text Count, >, 128), Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(90, 190, 255, 255)), Null, Visible To String and Color, Default Visibility);
        Create HUD Text(Local Player, Null, Custom String("Effect Count: {0}fgFFFFFFFF>{1} / {2}\n", Global.bracket, Entity Count, 128), Null, Right, -60, Null, If-Then-Else(Compare(Text Count, >, 128), Custom Color(255, Add(70, Multiply(30, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(70, Multiply(40, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Custom Color(70, 210, 255, 255)), Null, Visible To String and Color, Default Visibility);
    }
}

rule ("DEBUG: Exceeded Text Limit") {
    event {
        Ongoing - Global;
    }
    conditions {
        Text Count > 128;
    }
    actions {
        Big Message(All Players(All Teams), Custom String("{0}fgFF4455FF>ERROR: {0}fgFFFFFFFF>Exceeded Text Limit ({1}/{2})", Global.bracket, Text Count, 128));
        If(Global.DEBUG);
            Log To Inspector(Custom String("[{0}] ERROR: Exceeded Text Limit ({0}/{1})", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Text Count, Null));
    }
}

rule ("DEBUG: Exceeded Effect Limit") {
    event {
        Ongoing - Global;
    }
    conditions {
        Entity Count > 128;
    }
    actions {
        Big Message(All Players(All Teams), Custom String("{0}fgFF4455FF>ERROR: {0}fgFFFFFFFF>Exceeded Effect Limit ({0}/{1})", Global.bracket, Entity Count, Null));
        If(Global.DEBUG);
            Log To Inspector(Custom String("[{0}] ERROR: Exceeded Effect Limit ({0}/{1})", Custom String("{0}{1}:{2}", If-Then-Else(Compare(Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Divide(Global.stats_ReplayDuration, 60), Down), Custom String("{0}{1}", If-Then-Else(Compare(Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), <, 10), Custom String("0", Null, Null, Null), Custom String("", Null, Null, Null)), Round To Integer(Modulo(Global.stats_ReplayDuration, 60), Down), Null)), Entity Count, Null));
    }
}

rule ("DEBUG: Cycle Control Round") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.DEBUG == True;
        Global.C_IS_CONTROL == True;
        Is Button Held(Host Player, Button(Interact)) == True;
    }
    actions {
        Declare Round Victory(Team Of(Host Player));
        Wait(0.016, Ignore Condition);
        Set Team Score(Team Of(Host Player), 0);
    }
}

rule ("AMMO PACKS: B­lizzard World") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Blizzard World)), Compare(Current Map, ==, Map(Blizzard World Winter))) == True;
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(-8.34, 0.00, 29.98), Vector(24.61, 0.01, 40.35), Vector(-19.68, -5.1, 12.69), Vector(-22.04, 5.00, 47.30), Vector(27.08, 2.00, 48.86), Vector(17.44, -4, 31.35), Vector(2.98, -0.09, 46.76), Vector(3.08, 6.00, 82.94), Vector(24.14, 2.00, 83.80), Vector(3.40, -0.99, 107.67), Vector(2.95, 2.00, 67.79), Vector(-24.21, 2.00, 69.73), Vector(-28.21, 0.29, 110.95), Vector(-54.35, -0.19, 88.72), Vector(-77.31, 4.88, 66.11), Vector(-42.83, -0.2, 65.37), Vector(-78.18, 0.70, 101.96), Vector(-75.6, 0.25, 67.80), Vector(-74.55, 6.58, 97.26), Vector(-49.54, -0.21, 116.04), Vector(-30.16, 11.91, 88.42), Vector(-69.86, 0.90, 135.25), Vector(-84.7, -1.25, 107.33), Vector(-87.6, -0.25, 143.48), Vector(-80.41, -0.25, 178.84), Vector(-102.52, -1.25, 126.11), Vector(-112.99, -3.25, 101.74), Vector(-134.9, 0.75, 121.97), Vector(-124.98, 1.75, 88.37), Vector(-109.18, -1.25, 148.55), Vector(-116.28, -0.25, 115.91)));
    }
}

rule ("AMMO PACKS: Circuit Royal") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Circuit Royal);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(-38.42, 4.28, -26.54), Vector(-14.53, 7.00, -36.68), Vector(-13.5, 6.02, -18.22), Vector(-33.98, 6.00, -51.9), Vector(-1.56, 5.98, -3.77), Vector(-13.68, 6.00, 15.06), Vector(-7.41, 6.00, 15.60), Vector(17.37, 6.00, -3.94), Vector(-1.92, 10.00, -27.48), Vector(19.24, 10.00, -49.68), Vector(34.65, 9.00, -18.31), Vector(11.13, 15.00, -44.84), Vector(40.91, 13.97, 2.88), Vector(79.62, 11.96, -1.87), Vector(33.02, 14.00, -19.53), Vector(57.23, 13.96, 7.50), Vector(72.99, 17.96, 11.19), Vector(38.99, 14.96, 35.77), Vector(85.38, 16.67, 48.16), Vector(78.45, 9.96, 20.99), Vector(56.41, 13.96, 29.67), Vector(77.14, 9.96, 40.56), Vector(111.72, 9.96, 11.21), Vector(90.11, 15.96, 9.33), Vector(96.88, 7.96, 29.71), Vector(77.03, 16.67, 53.41), Vector(52.11, 14.01, -22.75), Vector(46.41, 18.96, 20.60), Vector(-31.24, 11.00, -6.5)));
    }
}

rule ("AMMO PACKS: Esperança") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Esperança);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(0.00, -2, -64.88), Vector(0.00, 1.00, -13.72), Vector(73.69, -2.98, -46.24), Vector(68.93, -3, -33.1), Vector(50.31, -2, -33.74), Vector(32.00, 0.02, -55), Vector(32.23, -4, -43.27), Vector(40.04, -2, -22.42), Vector(55.86, -3, -65.11), Vector(77.24, -3, -67.47), Vector(39.91, -6, -57.35), Vector(13.58, 0, -28.97), Vector(16.12, -5.99, -82.44), Vector(36.79, -10.5, -84.83), Vector(46.39, -6, -87.29), Vector(9.80, -5.01, -44.94), Vector(47.04, -2, -86.1), Vector(25.09, 0, -2.83), Vector(-73.68, -2.98, -46.26), Vector(-68.92, -3, -33.12), Vector(-50.31, -2, -33.75), Vector(-31.99, 0.02, -55.01), Vector(-32.22, -4, -43.27), Vector(-40.04, -2, -22.43), Vector(-55.85, -3, -65.12), Vector(-77.23, -3, -67.48), Vector(-39.9, -6, -57.36), Vector(-13.57, 0, -28.97), Vector(-16.1, -5.99, -82.44), Vector(-36.77, -10.5, -84.84), Vector(-46.38, -6, -87.29), Vector(-9.79, -5.01, -44.94), Vector(-47.03, -2, -86.11), Vector(-25.09, 0, -2.83)));
    }
}

rule ("AMMO PACKS: Hanamura") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hanamura)), Compare(Current Map, ==, Map(Hanamura Winter))) == True;
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(31.10, 0.19, 13.54), Vector(42.29, 1.01, -6.16), Vector(59.44, 2.00, -29.46), Vector(28.37, 3.00, 31.15), Vector(48.74, 6.00, 18.73), Vector(25.85, 0.00, 7.83), Vector(22.99, 0.02, -23.86), Vector(6.03, 4.00, 12.85), Vector(11.95, 11.13, 20.94), Vector(23.05, 6.00, -12.12), Vector(-9.57, 1.00, 8.65), Vector(-2.93, -0.99, 33.16), Vector(-21.95, -1.24, -16.76), Vector(-2.76, -2, -40.53), Vector(31.61, -1.55, -38.3), Vector(43.05, -1.99, -63.84), Vector(24.16, 2.94, -72.63), Vector(13.05, 7.05, -48.93), Vector(16.04, -1, -82.26), Vector(-13.35, -5.1, -69.54), Vector(6.66, -1, -92.72), Vector(-37.06, 1.00, -63.1), Vector(-20.18, 3.92, -57.23), Vector(0.38, -1, -67.13), Vector(-10.4, 1.00, -107.36), Vector(-32.99, 1.00, -80.86)));
    }
}

rule ("AMMO PACKS: Hanaoka") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Hanaoka);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(11.90, 39.50, 7.00), Vector(-17.28, 41.50, 7.00), Vector(-24.22, 44.03, -113.99), Vector(11.06, 40.01, -104.28), Vector(-26.94, 43.05, -51.49), Vector(22.25, 41.00, -71.35), Vector(-2.01, 41.50, -9.38), Vector(-4.9, 39.82, -95.17), Vector(-5.06, 38.34, -58.71), Vector(-30.02, 44.02, -74.56), Vector(-30.47, 40.00, -83.98), Vector(15.60, 42.50, -12.81), Vector(-23.58, 40.50, -17.33), Vector(-5.05, 40.02, -33.72), Vector(23.25, 44.50, 5.35), Vector(16.81, 40.07, -38.3), Vector(-24.22, 44.03, 127.99), Vector(11.06, 40.01, 118.28), Vector(-26.94, 43.05, 65.49), Vector(22.25, 41.00, 85.35), Vector(-2.01, 41.50, 23.38), Vector(-4.9, 39.82, 109.17), Vector(-5.06, 38.34, 72.71), Vector(-30.02, 44.02, 88.56), Vector(-30.47, 40.00, 97.98), Vector(15.60, 42.50, 26.81), Vector(-23.58, 40.50, 31.33), Vector(-5.05, 40.02, 47.72), Vector(23.25, 44.50, 8.65), Vector(16.81, 40.07, 52.30)));
    }
}

rule ("AMMO PACKS: Hollywood") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Hollywood)), Compare(Current Map, ==, Map(Hollywood Halloween))) == True;
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(-17.7, 1.75, -15.6), Vector(-11.21, 5.01, 41.79), Vector(-18.52, 0.01, 42.49), Vector(9.12, 1.75, 19.79), Vector(11.36, 0.00, 44.40), Vector(-5.78, 1.75, 10.88), Vector(-38.79, 5.75, 25.16), Vector(-34.78, -0.25, 10.32), Vector(-39.51, 1.75, -3.29), Vector(36.36, 2.75, -53.16), Vector(6.76, 1.75, -9.74), Vector(0.30, 1.75, -32.59), Vector(3.01, 2.99, -59.37), Vector(32.05, 1.86, -76.07), Vector(-15.41, 1.73, -62.94), Vector(16.61, 1.75, -40.02), Vector(2.00, 10.75, -28.86), Vector(2.06, 13.00, -66.18), Vector(26.04, 1.62, -93.79), Vector(-15.65, 1.75, -111.67), Vector(6.84, 3.75, -97.19), Vector(-35.29, 1.75, -84.66), Vector(-44.35, 9.75, -106.46), Vector(-19, 9.75, -116.3), Vector(-40, 1.75, -103.29), Vector(-26.72, 1.75, -123.88), Vector(-44.03, 3.75, -137.79), Vector(-18.34, 3.75, -153.27), Vector(-12.56, 4.12, -88.43), Vector(8.70, 3.75, -125.33)));
    }
}

rule ("AMMO PACKS: Ilios") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Ilios);
    }
    actions {
        Set Global Variable(C_IS_CONTROL, True);
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 0, Array(0, 14));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 1, Array(14, 16));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 2, Array(30, 16));
        Set Global Variable(C_AMMO_PACKS, Array(Vector(351.33, -25.54, 17.66), Vector(371.38, -27.64, -44.1), Vector(341.11, -23.66, -33.23), Vector(351.65, -18.64, -22.35), Vector(314.29, -23.66, -23.57), Vector(371.00, -27.64, -1.69), Vector(336.59, -24.69, -4.88), Vector(304.74, -25.54, -95.78), Vector(362.41, -27.64, -65.95), Vector(333.23, -23.66, -52.4), Vector(333.09, -18.64, -67.55), Vector(307.36, -23.66, -40.42), Vector(332.33, -27.64, -95.84), Vector(310.09, -24.69, -69.39), Vector(-199.25, 1.01, -7.25), Vector(-225.38, 5.32, -33.42), Vector(-189.19, 1.00, -20.18), Vector(-195.01, 1.00, -33.85), Vector(-215.38, 1.00, -35.38), Vector(-168.56, 5.00, -30.49), Vector(-193.4, 5.04, -52.36), Vector(-177.76, -1, -45.07), Vector(-169.62, -4.76, -74.54), Vector(-212.14, 1.00, 2.77), Vector(-225.81, 1.00, -3.05), Vector(-227.34, 1.00, -23.42), Vector(-222.44, 5.00, 23.40), Vector(-244.32, 5.04, -1.44), Vector(-237.03, -1, 14.20), Vector(-266.5, -4.76, 22.33), Vector(28.50, 57.37, -141.91), Vector(28.50, 60.37, -181.73), Vector(60.79, 60.37, -157.2), Vector(52.13, 60.37, -143.32), Vector(41.99, 60.49, -160.17), Vector(64.90, 60.97, -174.63), Vector(92.86, 60.37, -162.44), Vector(80.27, 58.37, -145.82), Vector(64.90, 64.47, -174.63), Vector(-3.79, 60.37, -157.21), Vector(4.87, 60.37, -143.32), Vector(15.01, 60.49, -160.17), Vector(-7.89, 60.97, -174.64), Vector(-35.86, 60.37, -162.45), Vector(-23.27, 58.37, -145.83), Vector(-7.89, 64.47, -174.64)));
    }
}

rule ("AMMO PACKS: Junkertown") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Junkertown);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(20.04, 9.00, -64.03), Vector(-6.76, 1.51, -20.63), Vector(-6.23, 7.06, -63.72), Vector(2.41, 7.02, -83.68), Vector(5.86, 7.04, -38.91), Vector(23.09, 6.94, -35.47), Vector(22.46, 10.10, -89.9), Vector(-38.86, 4.83, -33.87), Vector(-28.06, 4.48, -71.73), Vector(-54.17, 4.48, -77.17), Vector(-48.33, 12.48, -72.42), Vector(-52.26, 1.48, -136.03), Vector(-65.1, 12.43, -98.63), Vector(-40.15, 7.57, -89.87), Vector(-18.94, 13.48, -88.49), Vector(-11.85, 6.48, -105.34), Vector(-72.51, 6.37, -140.87), Vector(-84.89, 7.44, -171.38), Vector(-73.24, 7.43, -110.9), Vector(-49.18, 7.37, -123.87), Vector(-84.85, 13.37, -158.24), Vector(-88.26, 7.44, -99.14), Vector(-81.65, 6.44, -125), Vector(-103.41, 6.44, -114.25), Vector(-112.79, 12.44, -147.98), Vector(-54.53, 7.37, -151.18), Vector(-89.46, 6.37, -137.33), Vector(-48.92, 13.51, -117.03), Vector(-31.19, 6.53, -88.39)));
    }
}

rule ("AMMO PACKS: King's Row") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(King's Row);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(6.24, 0.07, -28.1), Vector(-42.73, 0.09, -38.39), Vector(8.94, 1.00, -9.63), Vector(-19.75, 0.08, -7.99), Vector(-21.7, 0.08, 11.82), Vector(20.84, 6.03, -39.14), Vector(-23.46, 1.00, -56.39), Vector(-15.39, 1.00, -20.37), Vector(-27.51, 6.00, -49.84), Vector(-62.4, -0.13, -15.52), Vector(-79.62, 0.27, 0.65), Vector(-29.65, 9.00, -11.28), Vector(-74.33, 0.50, -39.45), Vector(-48.01, 2.00, -51.51), Vector(-95.44, -2.5, -46.51), Vector(-85, 0.98, -5.3), Vector(-90.4, 0.82, -35.69), Vector(-137.25, 0.07, -12.8), Vector(-111.56, 1.07, 4.03), Vector(-109.51, 1.07, 29.73), Vector(-160.47, -2.93, 26.22), Vector(-139.8, -2.93, 37.23), Vector(-153.02, -2.91, 9.83), Vector(-140.87, -0.93, 9.66), Vector(-58.06, -0.06, -23.83), Vector(-33.54, 0.08, -15.12), Vector(-11.17, 0.07, -35.65), Vector(-107.84, 1.07, -22.13), Vector(-77.82, 6.00, -12.5)));
    }
}

rule ("AMMO PACKS: King's Row (Winter)") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(King's Row Winter);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(-42.73, 0.09, -38.39), Vector(8.94, 1.00, -9.63), Vector(-21.7, 0.08, 11.82), Vector(20.84, 6.03, -39.14), Vector(-23.46, 1.00, -56.39), Vector(-15.39, 1.00, -20.37), Vector(-27.51, 6.00, -49.84), Vector(-29.65, 9.00, -11.28), Vector(-74.33, 0.50, -39.45), Vector(-48.01, 2.00, -51.51), Vector(-95.44, -2.5, -46.51), Vector(-90.4, 0.82, -35.69), Vector(-137.25, 0.07, -12.8), Vector(-111.56, 1.07, 4.03), Vector(-109.51, 1.07, 29.73), Vector(-160.47, -2.93, 26.22), Vector(-139.8, -2.93, 37.23), Vector(-153.02, -2.91, 9.83), Vector(-140.87, -0.93, 9.66), Vector(-11.17, 0.07, -35.65), Vector(-107.84, 1.07, -22.13), Vector(-77.82, 6.00, -12.5), Vector(-57.03, -0.06, -23.5), Vector(-62.43, 0.95, -15.58), Vector(-33.11, 0.07, -17.99), Vector(-18.27, 0.16, -7.79), Vector(6.35, 0.60, -28.15), Vector(-84.57, 0.95, -7.14), Vector(-79.68, 0.27, 0.74)));
    }
}

rule ("AMMO PACKS: Lijiang Tower") {
    event {
        Ongoing - Global;
    }
    conditions {
        Or(Compare(Current Map, ==, Map(Lijiang Tower)), Compare(Current Map, ==, Map(Lijiang Tower Lunar New Year))) == True;
    }
    actions {
        Set Global Variable(C_IS_CONTROL, True);
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 0, Array(0, 15));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 1, Array(15, 14));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 2, Array(29, 14));
        Set Global Variable(C_AMMO_PACKS, Array(Vector(1.00, -2, -82.87), Vector(30.67, -3, -56.31), Vector(24.34, 0.00, -36.43), Vector(13.68, 0, -29.99), Vector(24.40, 6.03, -37.23), Vector(8.77, 0.00, -9.79), Vector(39.02, -1, -13.41), Vector(10.79, -1, -48.91), Vector(-28.67, -3, -56.31), Vector(-22.34, 0.00, -36.43), Vector(-11.68, 0, -29.99), Vector(-22.4, 6.03, -37.23), Vector(-6.77, 0.00, -9.79), Vector(-37.02, -1, -13.41), Vector(-8.79, -1, -48.91), Vector(0.00, 94.05, 133.17), Vector(0.00, 94.00, 182.81), Vector(13.65, 95.00, 114.74), Vector(-30.27, 94.00, 140.44), Vector(-30.21, 94.05, 176.20), Vector(-9.21, 94.15, 156.40), Vector(-52.39, 94.53, 154.60), Vector(-39.6, 94.90, 140.65), Vector(-13.65, 95.00, 114.74), Vector(30.27, 94.00, 140.44), Vector(30.21, 94.05, 176.20), Vector(9.21, 94.15, 156.40), Vector(52.39, 94.53, 154.60), Vector(39.60, 94.90, 140.65), Vector(0.00, 270.00, 267.46), Vector(0.00, 278.00, 300.41), Vector(15.47, 267.00, 272.79), Vector(19.41, 267.00, 308.36), Vector(29.45, 267.00, 320.85), Vector(31.86, 267.00, 284.79), Vector(8.25, 270.00, 305.25), Vector(2.95, 270.00, 319.68), Vector(-15.47, 267.00, 272.79), Vector(-19.41, 267.00, 308.36), Vector(-29.45, 267.00, 320.85), Vector(-31.86, 267.00, 284.79), Vector(-8.25, 270.00, 305.25), Vector(-2.95, 270.00, 319.68)));
    }
}

rule ("AMMO PACKS: Midtown") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Midtown);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(10.41, 3.97, 71.45), Vector(-24.7, 3.99, 62.28), Vector(-22.95, 3.75, 84.37), Vector(-5.88, 4.97, 32.39), Vector(-23.02, 4.00, 53.67), Vector(-2.69, 8.45, 93.68), Vector(-14.79, 10.56, 62.27), Vector(16.92, 7.97, 56.35), Vector(-7.42, 9.97, 21.52), Vector(25.76, 3.96, 44.46), Vector(36.63, 4.82, 20.11), Vector(44.13, 7.89, 1.51), Vector(78.27, 4.84, 40.45), Vector(47.35, 3.84, 47.97), Vector(49.50, 8.84, 45.49), Vector(65.77, 5.84, 29.23), Vector(35.88, -1.12, 8.57), Vector(61.36, -0.16, -3.47), Vector(83.92, 3.84, -37.09), Vector(34.00, 3.58, -21.28), Vector(88.32, 3.84, -2.5), Vector(110.27, 7.85, -21.99), Vector(86.78, 11.85, -37.99), Vector(112.49, 2.84, -38.98), Vector(125.39, 1.84, -29.42), Vector(109.17, 2.84, -69.47), Vector(143.32, 2.84, -63.62), Vector(121.53, 0.84, -59.24), Vector(86.35, 4.84, -60.18), Vector(52.01, 3.58, -47), Vector(61.17, 7.84, -1.24)));
    }
}

rule ("AMMO PACKS: New Queen Street") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(New Queen Street);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(0.00, 0.00, 22.20), Vector(0.00, 1.01, -18.48), Vector(-88.27, 11.00, -21.28), Vector(-73.91, 8.01, 1.65), Vector(-39.69, 4.00, -29.16), Vector(-21.79, 4.00, -15.7), Vector(-30.38, 4.00, -4.34), Vector(-31.29, 4.00, 26.68), Vector(-62.43, 8.00, 16.26), Vector(-9.95, 2.00, -49.24), Vector(-49.95, 4.00, -50.85), Vector(88.27, 11.00, -21.28), Vector(73.91, 8.01, 1.65), Vector(39.69, 4.00, -29.16), Vector(21.79, 4.00, -15.7), Vector(30.38, 4.00, -4.34), Vector(31.29, 4.00, 26.68), Vector(62.43, 8.00, 16.26), Vector(9.95, 2.00, -49.24), Vector(49.95, 4.00, -50.85)));
    }
}

rule ("AMMO PACKS: Numbani") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Numbani);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(94.83, -1.75, 32.70), Vector(46.03, -1.92, 1.11), Vector(27.39, 1.18, 4.15), Vector(45.26, -0.75, -22.11), Vector(85.73, 1.69, -15.9), Vector(84.83, 6.25, 19.26), Vector(71.94, -1.75, 19.58), Vector(46.90, 0.25, 26.89), Vector(61.74, -1.75, -3.83), Vector(71.61, 0.25, -17.87), Vector(100.56, 0.25, -18.32), Vector(102.98, -1.75, 4.88), Vector(119.01, -3.75, 33.01), Vector(124.37, -3.75, 24.69), Vector(144.91, -3.75, 41.27), Vector(159.10, -3.75, 24.62), Vector(141.98, -3.75, 6.00), Vector(153.85, -3.92, -3.48), Vector(120.78, -5.76, -16.33), Vector(126.88, -5.76, -16.72), Vector(149.58, 2.25, 28.17), Vector(117.48, 4.25, 2.66), Vector(75.61, 0.25, 14.00), Vector(183.91, -1.75, -15.31), Vector(179.01, -1.78, 27.71), Vector(202.73, 0.20, 42.28), Vector(220.98, 0.20, 22.65), Vector(205.93, -3.8, -10.5), Vector(198.09, -1.8, 11.26), Vector(165.70, 4.25, -5.21)));
    }
}

rule ("AMMO PACKS: Rialto") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Rialto);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(97.88, -1.25, -30.02), Vector(82.75, -1.24, -10.59), Vector(80.03, -1.25, -33.54), Vector(58.42, -1.25, -24.22), Vector(55.48, -0.24, -33.48), Vector(36.07, 0.87, -31.76), Vector(36.32, -0.25, -53.15), Vector(56.21, -0.25, -73.28), Vector(40.43, 5.75, -64.49), Vector(76.29, 3.75, -29.8), Vector(4.86, 0.52, -85.64), Vector(66.72, -0.25, -63.02), Vector(0.11, -0.25, -53), Vector(-3.05, 3.75, -33.03), Vector(-14.1, -1.25, -54.21), Vector(-11.85, -1.25, -23.53), Vector(-27.43, -1.75, -37.57), Vector(-46.63, -1.25, -74.09), Vector(-14.37, -0.25, -78.3), Vector(-24.96, 1.75, -102.55), Vector(-45.91, 4.75, -77.38), Vector(-64.98, 2.75, -92.77), Vector(-44.69, 1.75, -111.69), Vector(-78.75, 1.75, -110), Vector(-64.69, 2.75, -138.99), Vector(-49.16, 2.75, -139), Vector(44.85, -1.25, -89.22), Vector(32.79, -1.25, -79.19), Vector(14.97, -1.25, -52.82)));
    }
}

rule ("AMMO PACKS: Route 66") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Route 66);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(19.16, 7.56, 22.43), Vector(62.04, 2.85, 0.74), Vector(11.02, 8.97, -43.74), Vector(-6.97, 3.02, -6.4), Vector(-16.56, 3.49, -46.27), Vector(-50, 3.30, -36.15), Vector(-32.03, 3.43, -17.48), Vector(-24.14, 12.58, -15.65), Vector(-38.64, 3.33, -0.65), Vector(-98.65, 10.50, 1.09), Vector(-93.78, 6.50, -4.93), Vector(-81.59, 6.50, -23.58), Vector(-107.16, 12.50, -28.75), Vector(-64.71, 6.50, 5.91), Vector(44.36, 6.26, 46.32), Vector(-28.39, 3.43, -19.19), Vector(60.20, 0.11, 46.36), Vector(35.08, 7.83, 0.22), Vector(20.05, 2.05, 17.53), Vector(22.20, 2.04, -15.47), Vector(-23.85, 3.58, -56.01), Vector(-11.69, 8.51, -40.18), Vector(-77.14, 6.50, 23.98), Vector(-51.8, 6.50, 23.23), Vector(-90.11, 6.50, 22.60), Vector(-67.41, 6.50, -9.26), Vector(-76.46, 10.50, -5.69), Vector(68.28, 0.98, 19.46), Vector(50.91, 1.89, 16.59), Vector(33.97, 2.14, -6.07)));
    }
}

rule ("AMMO PACKS: Samoa") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Samoa);
    }
    actions {
        Set Global Variable(C_IS_CONTROL, True);
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 0, Array(0, 17));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 1, Array(17, 18));
        Set Global Variable At Index(C_AMMO_PACKS_STAGE_SLICE, 2, Array(35, 17));
        Set Global Variable(C_AMMO_PACKS, Array(Vector(-330, 9.00, -88.02), Vector(-350.76, 9.00, -94.98), Vector(-339.14, 2.93, -114), Vector(-342.63, 2.95, -137.75), Vector(-339.12, 3.03, -82.66), Vector(-363.99, 7.04, -79.77), Vector(-356.11, 9.00, -126.55), Vector(-391.93, 7.03, -100.48), Vector(-380.3, 7.05, -113.73), Vector(-309.24, 9.00, -94.98), Vector(-320.86, 2.93, -114), Vector(-317.37, 2.95, -137.75), Vector(-320.88, 3.03, -82.66), Vector(-296.01, 7.04, -79.77), Vector(-303.89, 9.00, -126.55), Vector(-268.07, 7.03, -100.48), Vector(-279.7, 7.05, -113.73), Vector(234.00, 14.99, -235.03), Vector(233.97, 6.81, -256), Vector(245.04, 5.22, -277.25), Vector(249.17, 9.25, -219.75), Vector(261.59, 8.10, -253.86), Vector(246.77, 7.00, -242.62), Vector(286.89, 12.29, -233.1), Vector(276.84, 13.00, -213.1), Vector(291.44, 6.31, -268.77), Vector(277.69, 9.00, -240.15), Vector(222.96, 5.22, -277.25), Vector(218.83, 9.25, -219.75), Vector(206.41, 8.10, -253.86), Vector(221.23, 7.00, -242.62), Vector(181.11, 12.29, -233.1), Vector(191.16, 13.00, -213.1), Vector(176.56, 6.31, -268.77), Vector(190.31, 9.00, -240.15), Vector(27.63, 344.63, 398.03), Vector(27.63, 345.65, 376.18), Vector(27.63, 333.63, 365.23), Vector(39.05, 338.62, 352.67), Vector(55.30, 338.66, 346.18), Vector(39.50, 340.63, 381.72), Vector(66.73, 340.63, 364.62), Vector(83.39, 342.63, 367.23), Vector(45.24, 342.64, 398.48), Vector(65.89, 340.66, 380.37), Vector(16.20, 338.62, 352.67), Vector(-0.05, 338.66, 346.18), Vector(15.75, 340.63, 381.72), Vector(-11.48, 340.63, 364.62), Vector(-28.14, 342.63, 367.23), Vector(10.01, 342.64, 398.48), Vector(-10.64, 340.66, 380.37)));
    }
}

rule ("AMMO PACKS: Throne of Anubis") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Throne of Anubis);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(21.17, -1, 0.00), Vector(-4.9, -5, 0.00), Vector(2.38, 1.95, 45.15), Vector(1.02, 5.13, 100.57), Vector(-0.98, 0, 89.04), Vector(-33, 5.00, 81.84), Vector(-38.12, 3.03, 47.85), Vector(-13.55, 2.00, 62.34), Vector(11.45, 4.00, 60.05), Vector(-16.77, 2.00, 37.45), Vector(6.30, 1.02, 21.49), Vector(26.23, 5.13, 89.95), Vector(19.99, 5.00, 32.28), Vector(-18.68, 1.93, 24.55), Vector(8.97, 6.56, 8.05), Vector(2.38, 1.95, -45.15), Vector(1.02, 5.13, -100.57), Vector(-0.98, 0, -89.04), Vector(-33, 5.00, -81.84), Vector(-38.12, 3.03, -47.85), Vector(-13.55, 2.00, -62.34), Vector(11.45, 4.00, -60.05), Vector(-16.77, 2.00, -37.45), Vector(6.30, 1.02, -21.49), Vector(26.23, 5.13, -89.95), Vector(19.99, 5.00, -32.28), Vector(-18.68, 1.93, -24.55), Vector(8.97, 6.56, -8.05)));
    }
}

rule ("AMMO PACKS: Watchpoint Gibraltar") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Watchpoint: Gibraltar);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(57.85, 9.44, -117.94), Vector(23.19, 4.00, -112.29), Vector(65.98, -6.19, -122.71), Vector(45.97, -4, -144.95), Vector(39.35, -3.98, -122.72), Vector(19.77, -11, -110.96), Vector(38.05, -11, -93.95), Vector(26.52, -5.02, -82.62), Vector(3.96, -5, -74.36), Vector(3.28, -2, -104.42), Vector(38.27, 0, -99.58), Vector(22.45, 3.00, -62.74), Vector(57.55, -1, -81.26), Vector(29.61, -1, -34.41), Vector(59.72, -5.01, -51.05), Vector(26.40, -5.01, -52.02), Vector(58.79, -10, -31.37), Vector(59.79, -3, -42.3), Vector(61.71, -2.98, -13.55), Vector(85.11, -2.99, -45.63), Vector(59.39, 3.35, -40.71), Vector(90.35, 3.00, -29.83), Vector(79.61, 1.00, -64.95), Vector(56.43, 9.97, -42.47), Vector(82.60, -3, 8.90), Vector(110.80, 0.00, -2.96), Vector(79.40, 1.00, 10.57), Vector(50.14, 1.00, 25.95), Vector(42.99, 9.00, 16.35), Vector(79.05, 9.00, 21.28), Vector(73.36, 1.00, 47.51), Vector(78.64, -3.18, -12.33), Vector(59.19, 1.00, -6.5), Vector(89.90, -0.94, 33.84)));
    }
}

rule ("AMMO PACKS: Workshop Island") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Workshop Island);
    }
    actions {
        Set Global Variable(C_AMMO_PACKS, Array(Vector(8, 0, 8), Vector(-8, 0, 8), Vector(8, 0, -8), Vector(-8, 0, -8), Vector(0.43, 0.00, -12.94), Vector(4.29, 0.00, -11.63), Vector(6.76, 0.00, -13.51), Vector(10.59, 0.00, -12.12), Vector(12.91, 0.00, -8.75), Vector(12.32, 0.00, -4.49), Vector(6.61, 0.00, -4.38), Vector(0.22, 0.00, -5.38), Vector(-0.96, 0.00, -1.4), Vector(3.61, 0.00, 1.43), Vector(10.25, 0.00, 0.66), Vector(14.94, 0.00, 5.82), Vector(7.00, 0.00, 5.33), Vector(1.81, 0.00, 4.65), Vector(1.18, 0.00, 8.84), Vector(7.64, 0.00, 12.68), Vector(13.38, 0.00, 13.25), Vector(0.21, 0.00, 10.94), Vector(-4.01, 0.00, 5.99), Vector(-4.89, 0.00, 2.02), Vector(-8.25, 0.00, -0.72), Vector(-7.95, 0.00, -3.67), Vector(-11.1, 0.00, -7.11), Vector(-11.37, 0.00, -10.06), Vector(-7.76, 0.00, -11.44), Vector(-3.89, 0.00, -9.39), Vector(-4.82, 0.00, -4.33), Vector(-9.41, 0.00, -2.4), Vector(-10.44, 0.00, 2.46), Vector(-12.73, 0.00, 4.92), Vector(-14.9, 0.00, 8.29), Vector(-12.4, 0.00, 10.88), Vector(-13.79, 0.00, 15.85), Vector(-9.67, 0.00, 15.63), Vector(-5.01, 0.00, 14.52), Vector(-4.6, 0.00, 11.33), Vector(-0.56, 0.00, 14.36), Vector(4.61, 0.00, 15.89), Vector(-13.15, 0.00, 2.04), Vector(-12.44, 0.00, -0.08), Vector(-12.49, 0.00, -2.69), Vector(-14.55, 0.00, -3.4), Vector(-14.01, 0.00, -6.32), Vector(-15.35, 0.00, -9.41), Vector(-15.52, 0.00, -12.3), Vector(-14.19, 0.00, -14.14), Vector(-11.51, 0.00, -14.47), Vector(-18.76, 0.00, -17.23), Vector(-16.76, 0.00, -17.93), Vector(17.47, 0.00, -17.67), Vector(17.61, 0.00, -14.11), Vector(14.08, 0.00, -17.69), Vector(18.70, 0.00, -11.04), Vector(16.69, 0.00, -8.68), Vector(18.54, 0.00, -6.59), Vector(17.15, 0.00, -4.83)));
    }
}

rule ("Subroutine: Destroy Ammo Packs") {
    event {
        Subroutine;
        destroyAmmoPacks;
    }
    actions {
        For Global Variable(i, 0, Count Of(Global.AMMO_PACK_POSITIONS), 1);
            Destroy Effect(Value In Array(Global.AMMO_PACK_EFFECTS_PROJ, Global.i));
            Destroy Effect(Value In Array(Global.AMMO_PACK_EFFECTS_RING, Global.i));
            Destroy In-World Text(Value In Array(Global.AMMO_PACK_EFFECTS_TEXT, Global.i));
            Wait(0.016, Ignore Condition);
        End;
        Set Global Variable(AMMO_PACK_EFFECTS_PROJ, Empty Array);
        Set Global Variable(AMMO_PACK_EFFECTS_RING, Empty Array);
        Set Global Variable(AMMO_PACK_EFFECTS_TEXT, Empty Array);
        Set Global Variable(AMMO_PACK_POSITIONS, Empty Array);
        Set Global Variable(AMMO_PACK_TIMESTAMPS, Empty Array);
        Wait(0.016, Ignore Condition);
    }
}

rule ("Subroutine: Create Ammo Packs") {
    event {
        Subroutine;
        createAmmoPacks;
    }
    actions {
        "returns the ammo pack's current remaining cooldown in seconds."
        For Global Variable(i, 0, Count Of(Global.AMMO_PACK_POSITIONS), 1);
            "create VFX."
            Create Projectile Effect(If-Then-Else(Compare(Subtract(Global.AMMO_PACK_RESPAWN_TIME, Subtract(Total Time Elapsed, Value In Array(Global.AMMO_PACK_TIMESTAMPS, Evaluate Once(Global.i)))), <=, 0), All Players(All Teams), Null), Baptiste Biotic Launcher, Local Player, Add(Value In Array(Global.AMMO_PACK_POSITIONS, Evaluate Once(Global.i)), Vector(0, Add(0.3, Multiply(Sine From Radians(Multiply(Total Time Elapsed, 2)), 0.1)), 0)), Direction From Angles(Multiply(Total Time Elapsed, 80), -85), 0.02, Visible To Position Direction and Size);
            Set Global Variable At Index(AMMO_PACK_EFFECTS_PROJ, Global.i, Last Created Entity);
            Create Effect(All Players(All Teams), Ring, If-Then-Else(Compare(Subtract(Global.AMMO_PACK_RESPAWN_TIME, Subtract(Total Time Elapsed, Value In Array(Global.AMMO_PACK_TIMESTAMPS, Evaluate Once(Global.i)))), <=, 0), Color(Orange), Color(Gray)), Value In Array(Global.AMMO_PACK_POSITIONS, Global.i), 0.5, Visible To and Color);
            Set Global Variable At Index(AMMO_PACK_EFFECTS_RING, Global.i, Last Created Entity);
            "create respawn time text."
            Create In-World Text(All Players(All Teams), If-Then-Else(Compare(Subtract(Global.AMMO_PACK_RESPAWN_TIME, Subtract(Total Time Elapsed, Value In Array(Global.AMMO_PACK_TIMESTAMPS, Evaluate Once(Global.i)))), >, 0), Subtract(Global.AMMO_PACK_RESPAWN_TIME, Subtract(Total Time Elapsed, Value In Array(Global.AMMO_PACK_TIMESTAMPS, Evaluate Once(Global.i)))), Custom String("", Null, Null, Null)), Add(Value In Array(Global.AMMO_PACK_POSITIONS, Global.i), Vector(0, 0.4, 0)), 1, Clip Against Surfaces, Visible To and String, Custom Color(255, 255, 255, 200), Visible Always);
            Set Global Variable At Index(AMMO_PACK_EFFECTS_TEXT, Global.i, Last Text ID);
            "initialize cooldown timestamp."
            Set Global Variable At Index(AMMO_PACK_TIMESTAMPS, Global.i, Multiply(-1, Global.AMMO_PACK_RESPAWN_TIME));
            Wait(0.032, Ignore Condition);
        End;
    }
}

rule ("Create All Ammo Packs") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.C_AMMO_PACKS == True;
        Global.C_IS_CONTROL == False;
    }
    actions {
        "if the game mode is not control, create every ammo pack in the map."
        Set Global Variable(AMMO_PACK_POSITIONS, Global.C_AMMO_PACKS);
        Call Subroutine(createAmmoPacks);
    }
}

rule ("Swap Ammo Packs Between Control Stages") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.C_AMMO_PACKS == True;
        Global.C_IS_CONTROL == True;
        Objective Index != Global.CONTROL_STAGE;
    }
    actions {
        "if the game mode is control, only ammo packs in the current stage should be active."
        Call Subroutine(destroyAmmoPacks);
        Set Global Variable(AMMO_PACK_POSITIONS, Array Slice(Global.C_AMMO_PACKS, First Of(Value In Array(Global.C_AMMO_PACKS_STAGE_SLICE, Objective Index)), Value In Array(Value In Array(Global.C_AMMO_PACKS_STAGE_SLICE, Objective Index), 1)));
        Call Subroutine(createAmmoPacks);
        Set Global Variable(CONTROL_STAGE, Objective Index);
    }
}

rule ("Warning for Missing Ammo Packs") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.C_AMMO_PACKS == False;
    }
    actions {
        Create HUD Text(If-Then-Else(Is Game In Progress, Null, Local Player), Custom String("{0} WARNING {0}", Icon String(Warning), Null, Null), Null, Null, Top, 5, Custom Color(255, Add(190, Multiply(15, Sine From Radians(Multiply(Total Time Elapsed, 15)))), Add(60, Multiply(20, Sine From Radians(Multiply(Total Time Elapsed, 15)))), 255), Null, Null, Visible To and Color, Default Visibility);
        Create HUD Text(If-Then-Else(Is Game In Progress, Null, Local Player), Null, Null, Custom String("\nThis map does not have any ammo packs!", Null, Null, Null), Top, 5, Null, Null, Color(White), Visible To, Default Visibility);
        Create HUD Text(If-Then-Else(Is Game In Progress, Null, Local Player), Null, Null, Custom String("\nPlayers will be unable to replenish their ammo outside of spawn.", Null, Null, Null), Top, 5, Null, Null, Color(White), Visible To, Default Visibility);
    }
}

